# Some statistics...

```{r, include=FALSE}
knitr::opts_chunk$set(message = FALSE,
                      warning = FALSE,
                      comment = FALSE)
library(tidyverse)
```

## Read all graphs from a level of the experiment

Read all graphs from a level from experiment; for example individuals. We read only firts (alphabetic) two graph


# Graph kernels

**Graph Kernels package**

[graphkernels: R and Python packages for graph comparison](https://academic.oup.com/bioinformatics/article/34/3/530/4209994?login=true) statGraph' [Discriminating Different Classes of Biological Networks by Analyzing the Graphs Spectra Distribution](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0049949)


```{r}
load("Similarities.Rdata")
load("MBB_mDag_Results.Rdata")
path_exp="data/results_ff15c187-62e7-37c2-96a7-c824f7eab671/data/"
list_names=dir(paste0(path_exp,"Individuals/"))
#list_names
list_names= list_names[-1] # filter 0000_RefPw
length(list_names)
#list_names
#dir(paste0("Individuals/",list_names[1],"/"))
library(igraph)
graphs_list=paste0(path_exp,"Individuals/",list_names,"/",list_names,"_MDAG.graphml")
#head(as_long_data_frame(g_MDAG_list[[1]]))
```


```{r}
knitr::include_graphics(
  paste0(path_exp,"Individuals/cang/cang_mDAG.svg"))
```

```{r}
knitr::include_graphics(paste0(path_exp,"Individuals/cang/cang_mDAG_essential.svg"))
```

```{r}
knitr::include_graphics(
  paste0(path_exp,"Individuals/cang/cang_RC.svg"))
```




## Graph statistics



```{r}
read_mDAG=function(x) {DAG=read.graph(file=x,
                                  format="graphml")
  return(DAG)}
mDAG_componets=function(x) {sort(components(x,mode = "weak")$csize,
                                 decreasing=TRUE)}



compo_list=lapply(graphs_list,
                  FUN=function(x) {
                    gg=read_mDAG(x)
                  aux=list(
                    mDAG_componets=mDAG_componets(gg),
                    degree_count=igraph::degree(gg,mode="total"))
                    return(aux)}
                  )

names(compo_list)=list_names
n=max(sapply(compo_list,FUN=function(x) {length(x[[1]])}))
n
size_compo_list=lapply(compo_list,FUN=function(x) {
  return(c(x[[1]],rep(NA,n-length(x[[1]]))))})

aux=do.call(bind_cols,size_compo_list)
aux2=pivot_longer(aux,aaf:zvi,names_to="Organism",
                  values_to="csize")%>%
  arrange(Organism,-csize)
aux2$index=rep(1:n,times=dim(aux)[2])
aux2=aux2 %>% left_join(meta_taxo,by="Organism")
```



```{r}
Organism=names(compo_list)
big_MBB=function(org){
  x=Results %>% filter(Organism==org)
  x=as.character(x[1,5:dim(Results)[2]])
  x=x[x!="NA"]
  tt=sort(table(x),decreasing=TRUE)
  return(tt)
  }
big_MBB_list= lapply(Organism,FUN=function(x) big_MBB(x))
nMBB=max(sapply(big_MBB_list,FUN=function(x) length(x)))
nMBB
big_MBB_list=lapply(big_MBB_list,
                    FUN=function(x){
                      x=c(x,rep(NA,nMBB-length(x)))
                      return(x)}
)
names(big_MBB_list)=Organism
big_MBB_list=do.call(bind_cols,big_MBB_list)

kMBB=nrow(big_MBB_list)
index=rep(1:kMBB,times=length(Organism))

big_MBB_list2=pivot_longer(big_MBB_list,cols=names(big_MBB_list),values_to = "MBBsize",names_to = "Organism") %>% arrange(Organism,-MBBsize)%>%  mutate(index=index) %>%  left_join(meta_taxo,by="Organism")

```


### Sizes of MBB for each mDAG

```{r}
COLOR_KINGDOM=c("red","black","green","yellow")
colors_kingdom=big_MBB_list2%>% select(Organism,Kingdom) %>% distinct()
names(COLOR_KINGDOM)=sort(unique(colors_kingdom$Kingdom))

p0<-ggplot(data=big_MBB_list2) + 
  geom_line(mapping=aes(x=index,y=MBBsize,group = Organism,color=Kingdom)) + 
  scale_x_continuous(trans='log10') + 
  scale_y_continuous(trans='identity') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])+
   ggtitle("Plot log-log of MBB \n  decreasing index.") +
  ylab("Log10 MBB size") + xlab("Index")


p1<- ggplot(data=big_MBB_list2) + 
  geom_line(mapping=aes(x=index,y=MBBsize,group = Organism,color=Kingdom)) + 
  scale_x_continuous(trans='log10') + 
  scale_y_continuous(trans='log10') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])+
   ggtitle("Plot log-identity of MBB \n  decreasing index.") +
  ylab("Log10 MBB size") + xlab("Index")

p2<- ggplot(data=big_MBB_list2) + 
  geom_smooth(mapping=aes(x=index,y=MBBsize,group = Organism,color=Kingdom),na.rm=TRUE,se = FALSE)+
   scale_x_continuous(trans="identity") + 
  scale_y_continuous(trans="identity") +
  ylim(0,1039)+
   ggtitle("Plot  of MBB sized  \n  decreasing index.") +
  ylab("MBB size") + xlab("Index")+
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])

library(patchwork)

p0
p1
p2
```

### Sizes of weak components for each mDAG


```{r}
COLOR_KINGDOM=c("red","black","green","yellow")
colors_kingdom=aux2%>% select(Organism,Kingdom) %>% distinct()
names(COLOR_KINGDOM)=sort(unique(colors_kingdom$Kingdom))

p0<-ggplot(data=aux2) + 
  geom_line(mapping=aes(x=index,y=csize,group = Organism,color=Kingdom)) + 
  scale_x_continuous(trans='log10') + 
  scale_y_continuous(trans='identity') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])+
   ggtitle("Plot log-log of size  weak components \n  decreasing index.") +
  ylab("LOg10 Weak componente size") + xlab("Index")


p1<- ggplot(data=aux2) + 
  geom_line(mapping=aes(x=index,y=csize,group = Organism,color=Kingdom)) + 
  scale_x_continuous(trans='log10') + 
  scale_y_continuous(trans='log10') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])+
   ggtitle("Plot log-identity of size  weak components \n  decreasing index.") +
  ylab("Log10 weak component size") + xlab("Index")

p2<- ggplot(data=big_MBB_list2) + 
  geom_smooth(mapping=aes(x=index,y=MBBsize,group = Organism,color=Kingdom),na.rm=TRUE,se = FALSE)+
   scale_x_continuous(trans="identity") + 
  scale_y_continuous(trans="identity") +
  ylim(0,1039)+
   ggtitle("Plot  of size  weak components \n  decreasing index.")+  ylab("Weak components size") + xlab("Index")+
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])

library(patchwork)

p0
p1
p2
```