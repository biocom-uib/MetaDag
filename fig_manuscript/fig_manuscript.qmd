---
title: "Two figures"
toc: true
---

```{r  include=FALSE,message=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      cache=TRUE,
                      warning = FALSE,
                      message = FALSE,
                      out.width = "100%",
                      cache.lazy=FALSE)
pdf="TRUE"

library(tidyverse)
library(igraph)
library(ComplexHeatmap)
library(viridis)
library(circlize)
library(plotly)
library(randomcoloR)
library(factoextra)
library(RColorBrewer)
library(kableExtra)
library(igraph)
library(GGally)
```

```{r}
gc()
load(file='../metadag_work_space.RData')
gc()
```

# Graph statistics

We can visualize the sizes of the weak components for each m-DAG, using colors to represent the different Kingdoms, also we scale the results by a log-log plot:

## Weak components size

```{r}
COLOR_KINGDOM=c("red","yellow","green","black")
colors_kingdom=weak_components_size%>% select(Organism,Kingdom) %>% distinct()
names(COLOR_KINGDOM)=sort(unique(colors_kingdom$Kingdom))

p1<- ggplot(data=weak_components_size) + 
  geom_line(mapping=aes(x=index,
                        y=csize,group = Organism,
                        color=Kingdom),
            na.rm=TRUE) + 
  scale_x_continuous(trans="identity") + 
  scale_y_continuous(trans="identity") +
  ylim(0,640)+
  ggtitle("Plot of weak components size decreasing order.")+
  ylab("Weak components size") + xlab("Order")+
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])

p2<- ggplot(data=weak_components_size) + 
  geom_line(mapping=aes(x=index,
                        y=csize,group = Organism,
                        color=Kingdom),
            na.rm=TRUE) + 
  scale_y_continuous(trans='log10') + 
  scale_x_continuous(trans='log10') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])+
  ggtitle("Plot log10-log10 of size  weak components decreasing order.") +
  ylab("Log10 weak component size") + xlab("Log10 order")
p1
p2
```

A table with the frequencies of the weak connected components sizes, displayed by Kingdom, can be obtained as follows:

```{r}
aux=table(weak_components_size$csize,weak_components_size$Kingdom)
table_wcc_size=tibble(Order=1:dim(aux)[1],
                      Wcc_size=as.integer(unlist(dimnames(aux)[1])),
                      Animals=aux[,1],
                      Fungi=aux[,2],
                      Plants=aux[,3],
                      Protists=aux[,4])
knitr::kable(table_wcc_size) %>% kable_styling(bootstrap_options = "striped", full_width = FALSE) %>%
  scroll_box(height = "300px", width = "100%")
```

A table with the frequencies of the MBBs sizes displayed by Kingdom can be obtained as follows:

```{r}
aux=table(big_MBB_list2$MBBsize,big_MBB_list2$Kingdom)
table_MBB_size=tibble(Order=1:dim(aux)[1],
                      MBB_size=as.integer(unlist(dimnames(aux)[1])),
                      Animals=aux[,1],
                      Fungi=aux[,2],
                      Plants=aux[,3],
                      Protists=aux[,4])
knitr::kable(table_MBB_size)%>% kable_styling(bootstrap_options = "striped", full_width = FALSE) %>%
  scroll_box(height = "300px", width = "100%")
```

```{r pasar_load, include=FALSE}
save.image(file='metadag_work_space.RData')
```

### More statistics

```{r}

weak_components_size$Kingdom <- factor(weak_components_size$Kingdom)
#weak_components_size


g1 <- ggplot(weak_components_size) +
  xlab("") +  
  ylab("Size of connected component") +  
  geom_jitter(aes(x = Kingdom, y = csize, color = Kingdom),
             size = 1) +  # 
  scale_y_continuous(breaks = seq(0, 640, by = 100)) +
  theme_minimal() + # white background
  scale_fill_manual(values = COLOR_KINGDOM) +  # colors 
  scale_color_manual(values = COLOR_KINGDOM) 
  ggtitle("") # empty title
g1
ggsave("weak_components_size.png", plot = g1, width = 8, height = 6, dpi = 300)
ggsave("weak_components_size.eps", plot = g1, width = 8, height = 6, dpi = 300)
ggsave("weak_components_size.svg", plot = g1, width = 8, height = 6, dpi = 300)

ggsave("weak_components_size.pdf", plot = g1, width = 8, height = 6, dpi = 300)

```

```{r}
weak_components_size_max = weak_components_size %>%
  group_by(Organism) %>%
  summarise(csize = max(csize),Kingdom=first(Kingdom))
# Crear el gráfico de violín con puntos jitter
g2 <- ggplot(weak_components_size_max, aes(x = Kingdom, y = csize)) +
  geom_violin(aes(fill = Kingdom), trim = FALSE, alpha = 0.5) +  # Gráfico de violín con relleno por 'Kingdom' y sin recortar
  geom_jitter(aes(color = Kingdom), size = 1, width = 0.2) +  # Puntos con jitter para evitar solapamientos
  xlab("") +  # Eliminar el título del eje X
  ylab("Size of largest connected component") +  
  scale_y_continuous(breaks = seq(0, 640, by = 100)) +  
  theme_minimal() + # theme background white
  scale_fill_manual(values = COLOR_KINGDOM) +  # colors 
  scale_color_manual(values = COLOR_KINGDOM) 
  ggtitle("")  #
#Size of the largest weakly connected component by Kingdom \n (Violin Plot with Jittered Points)
# Mostrar el gráfico
g2
ggsave("weak_components_size_max.png", plot = g2, width = 8, height = 6, dpi = 300)
ggsave("weak_components_size_max.svg", plot = g2, width = 8, height = 6, dpi = 300)
ggsave("weak_components_size_max.eps", plot = g2, width = 8, height = 6, dpi = 300)

ggsave("weak_components_size_max.pdf", plot = g2, width = 8, height = 6, dpi = 300)
```
