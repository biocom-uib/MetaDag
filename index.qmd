As a running example in [metaDag](https://http://bioinfo.uib.es/metadag/) we consider the test presented in Section 2.5 Eukaryotes test. Namely, we consider all Eukaryotes from the KEGG database. Results must be downloaded from: 


Hash: [0a845f74-826e-3b46-aed9-e7ecf74db262](https://bioinfo.uib.es/metadag/handleExperiment/result_0a845f74-826e-3b46-aed9-e7ecf74db262){.uri}

URL: <https://bioinfo.uib.es/metadag/handleExperiment/result_0a845f74-826e-3b46-aed9-e7ecf74db262>

and saved in a folder named "data/result_0a845f74-826e-3b46-aed9-e7ecf74db262".

```{r setup_load_data, include=FALSE,message=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      cache=FALSE,
                      warning = FALSE,
                      message = FALSE, out.width = "100%")
pdf="TRUE"
```

```{r  tidy,message=FALSE}
library(tidyverse)
library(igraph)
library(ComplexHeatmap)
library(viridis)
library(circlize)
library(plotly)
library(randomcoloR)
library(factoextra)
library(RColorBrewer)
library(kableExtra)
library(igraph)
library(GGally)
```

```{r setup, echo=FALSE,include=FALSE}
knitr::include_graphics("figures/screen_1.png")
```

```{r echo=FALSE}
knitr::include_graphics("figures/screen_2.png")
```

```{r echo=FALSE}
knitr::include_graphics("figures/screen_3.png")
```

```{r echo=FALSE}
knitr::include_graphics("figures/screen_4.png")
```

# Load data

```{r}
experiment=
  "result_0a845f74-826e-3b46-aed9-e7ecf74db262/"
path_exp=paste0("data/",experiment)
knitr::kable(data.frame(
  Directory_files_and_folders=dir(path_exp),
  Type=c(rep("Data file",2),
  rep("Directory",3),
  rep("Data file",6),
  "Directory")))
```

```{r}
MBB=read_csv(paste0(path_exp,"Different_MBB.csv"),
             show_col_types = FALSE)
mDAG=read_csv(paste0(path_exp,"Different_mDAG.csv"),
              show_col_types = FALSE)
Results=read_csv(paste0(path_exp,"Results.csv"),
                 show_col_types = FALSE)
save(MBB,mDAG,Results,
     file="MBB_mDag_Results.Rdata")
```

## Table of MBBs

In this example `MBB` is a table with `r nrow(MBB)` rows and `r ncol(MBB)` columns. It shows, for every MBB, the selected groups (Kingdoms, families, etc.) where it appears.  

```{r}
#100
knitr::kable(MBB[1:20,1:10]) %>%   
  scroll_box(width = "100%", height = "200px")
```

## Table of m-DAGs

In this example `mDAG` is a table with `r nrow(mDAG)` rows and `r ncol(mDAG)` columns. It shows, for every m-DAG, the selected groups (Kingdoms, families, etc.) where it belongs. 


```{r}
kable(mDAG[1:20,1:10]) %>%   scroll_box(width = "100%", height = "200px")
```

```{r}
dim(mDAG)
names(mDAG)[1:6]
head(names(mDAG)[7:(dim(mDAG)[2]-1150)])
# 28 to 1213  code MBB: 1 if MBB in mDAG 0
```

## Results Table

Tabular data `Results` contains for every organism (row), its category (taxonomy), selected group, Full name, m-DAG id and all reactions name id with its enzyme. When the reaction is present in the corresponding m-DAG the MBB where it belongs is shown in this column.

```{r}
kable(Results[1:20,1:10])%>%
  row_spec(0, angle = 0) %>%   
  scroll_box(width = "300%", height = "1000px")
```

```{r}
dim(Results)
names(Results)[1]# organisms  kegg id  class representant of mDAG
names(Results)[2]# taxonomy separate by |
names(Results)[3]# groups 
names(Results)[4]# mDAG_Id 
names(Results)[5]# Full name representant
names(Results)[6:36]# columns 6 to 3998 
# reactions name id with its enzyme.
```

```{r}
reactions=names(Results)[-c(1:5)]
reverse_reactions=stringr::str_detect(reactions,"rev")
reverse_reactions=table(reverse_reactions)
dimnames(reverse_reactions)$reverse_reactions=
  c("Non reverse reaction","Reverse reaction")
reverse_reactions
```

# Metabolic Graphs

Read graphs in graphml format

## Read graph for each organism

Read the individual graphs generated for Homo sapiens (KEGG id: hsa) at directory(Individuals/hsa)

```{r}
files_hsa=dir(paste0(path_exp,"Individuals/hsa"))
files_hsa
```

```{r echo=FALSE}
files_hsa=dir(paste0(path_exp,"Individuals/hsa"))
# "plot mDAG pdf format",
#             "plot mDAG svg format",
type_file=c("m-DAG GraphML format",
            "m-DAG pdf graphic",
            "m-DAG svg graphic",
            "csv file with the adjacency matrix of the m-DAG",
            "bigger conected componet of the m-DAG pdf graphic",
            "bigger conected componet of the m-DAG svg graphic",
            "csv file with node (MBBs) labels  of the m-DAG", 
            "csv file with all connected components of the m-DAG ???????",
            "csv file with the  adjacency matrix of the reaction graph",
            "csv file with node (reactions) labels  of the reaction graph", 
            "reaction graph  GraphML format",
            "reaction graph pdf graphic",
            "reaction graph svg graphic",
            "text file with number of nodes, reactions, etc."
            )
knitr::kable(data.frame(files_Individual_hsa=files_hsa, Description=type_file))
```

```{r}
graph_mDAG=read.graph(
  paste0(path_exp,
         "Individuals/hsa/hsa_mDAG.graphml"),
  format= "graphml")
summary(graph_mDAG)
barplot(table(igraph::degree(graph_mDAG,mode="all")),
              ylim=c(0,350),col="blue",
              main="Frequency of nodes degree",
              ylab="Frequency",xlab="degree")
```

## mDag Global core for eukaryotes

Note that the mDAG core is empty as it does not contain any reactions.

### Core mDAG

```{r}
graph_core_mDAG=read.graph(
  paste0(path_exp,"Global/core/core_mDAG.graphml"),
  format = "graphml")
summary(graph_core_mDAG)
```

```{r fig.cap="Core mDAG is empty",eval=FALSE}
# file missing
knitr::include_graphics(paste0(path_exp,
                               "Global/core/core_mDAG.pdf"))
```

The graph core mDAG have `r igraph::vcount(graph_core_mDAG)` vertex and `r igraph::ecount(graph_core_mDAG)`, is an empty graph.

### Core reaction graph (RC)

```{r}
graph_core_RC=read.graph(
  paste0(path_exp,
         "Global/core/core_RC.graphml"),
  format = "graphml")
summary(graph_core_mDAG)
```

```{r fig.cap="Core mDAG is empty"}
knitr::include_graphics(
  paste0(path_exp,"Global/core/core_RC.pdf"))
```

The graph core reaction graph have `r igraph::vcount(graph_core_RC)` vertex and `r igraph::ecount(graph_core_RC)`, is an empty graph.

## mDag Global pan for eukaryotes

### Pan mDAG

```{r}
graph_pan_mDAG=read.graph(
  paste0(path_exp,
         "TaxonomyLevels/Kingdom/Animals/pan/Animals_pan_mDAG.graphml"),
  format = "graphml")
summary(graph_pan_mDAG)
```

The graph pan mDAG have `r  igraph::vcount(graph_pan_mDAG)` vertex and `r igraph::ecount(graph_pan_mDAG)`.

### Pan Reaction graph (RC)

```{r}
graph_pan_RC=read.graph(
  paste0(path_exp,
         "TaxonomyLevels/Kingdom/Animals/pan/Animals_pan_RC.graphml"),
  format = "graphml")
summary(graph_pan_RC)
```

The graph pan reaction graph have `r igraph::vcount(graph_pan_RC)` vertex and `r igraph::ecount(graph_pan_RC)`.

```{r}
compo=components(graph_mDAG,mode = "weak")
str(compo)
compo$csize
k=which.max(compo$csize==max(compo$csize))
k
table(compo$membership)
vertex=which(compo$membership==k)
length(vertex)
Big_Component=induced_subgraph(graph_mDAG, vids=vertex)
igraph::vcount(Big_Component)
igraph::ecount(Big_Component)
```

The curated plot of the bigger component of hsa mDAG

```{r fig.align='center',title="Bigger componet of hsa mDAG"}
knitr::include_graphics(paste0(path_exp,
                            "Individuals/hsa/hsa_mDAG_biggerDAG.pdf"))
```

# Similarities and metadata for an experiment

We will first load the metadata and adapt them to the structure of the similarities to facilitate the creation of the graphs and statistics.

Remenber de path of the experiment:

```{r}
path_exp
```

## Load meta data from eukariotes experimet

Meta data mDa_Id and taxonomy sort by Kingdom,Filum,Class,mDAG_Id

```{r}
path_exp
Results=read_csv(paste0(path_exp,"Results.csv"))
#arreglo los nombres de MEtaDag
names(Results)[c(1,2,3,4,5)]=c("Organism","Categories","Groups","mDAG_Id","Full_Name")
taxo=Results %>% select(Organism:Full_Name)
taxo=taxo %>% separate(Categories,into=c("Kingdom","Phylum","Class"))
index=which(is.na(taxo$Class))
taxo$Class[index]=paste(taxo$Phylum[index])
meta_taxo=taxo
aux=table(meta_taxo$Phylum)
Freq_Phylum=tibble(Phylum=names(aux),Freq_Phylum=aux)
names(Freq_Phylum)=c("Phylum","Freq_Phylum")
aux=table(meta_taxo$Class)
Freq_Class=tibble(Class=names(aux),Freq_Class=aux)
names(Freq_Class)=c("Class","Freq_Class")


meta_taxo = meta_taxo %>% 
  left_join(Freq_Phylum) %>%
  left_join(Freq_Class)
meta_taxo = meta_taxo %>% 
  arrange(Kingdom,desc(Freq_Phylum),Phylum,
          desc(Freq_Class),Class)
head(meta_taxo)
```

```{r}
table(meta_taxo$Kingdom) %>% kable %>%
  kable_styling("striped", full_width = F,position="left")%>% 
 scroll_box(width = "400px", height = "200px")
table(meta_taxo$Phylum,meta_taxo$Kingdom) %>% kable %>%
  kable_styling("striped", full_width = F,position="left")%>% 
 scroll_box(width = "500px", height = "500px")
```

## Similarities MSA,Munkres methods

In this section we will show the similarities between mDAG's using different methods.

The experiment data set consists of `r nrow(meta_taxo)` eurkaryotes from the animal, plant, fungus, and protist kingdoms.

```{r, echo=FALSE}
knitr::kable(table(meta_taxo$Kingdom),col.names = c("Kingdom","Abs. Freq."))
```

```{r}
list_Sim=dir(path_exp,pattern="^Similarities")
list_Sim
```

Load MDAG similarities

```{r}
Sim_MSA_mDAG=read_csv(paste0(path_exp,
                             "Similarities_mDAG_MSAMethod.csv"))
Sim_MSA_mDAG=as.matrix(Sim_MSA_mDAG[,-1])
rownames(Sim_MSA_mDAG)=colnames(Sim_MSA_mDAG)
Sim_MSA_mDAG=Sim_MSA_mDAG[meta_taxo$mDAG_Id[1:884],
                          meta_taxo$mDAG_Id[1:884]]
```

```{r}
Sim_Mun_mDAG=read_csv(paste0(path_exp,"Similarities_mDAG_MunkresMethod.csv"))
Sim_Mun_mDAG=as.matrix(Sim_Mun_mDAG[,-1])
rownames(Sim_Mun_mDAG)=colnames(Sim_Mun_mDAG)
Sim_Mun_mDAG=Sim_Mun_mDAG[meta_taxo$mDAG_Id[1:884],meta_taxo$mDAG_Id[1:884]]
```

## Heatmaps

### Heatmap Similarity MSA and Munkres method

```{r, fig.align='center', fig.height=5, cache=TRUE}
dff<-meta_taxo[1:884,] %>% select(Kingdom)  %>% as.data.frame()
colorsK <- list(Kingdom= c("Animals"="red",
                           "Plants"="green",
                           "Fungi"="yellow",
                           "Protists"="black"))
annotationK <- HeatmapAnnotation(df=dff, col = colorsK,show_legend = TRUE)

MSA_heat_1 <- Heatmap(matrix = Sim_MSA_mDAG, 
                      column_title=
                        "m-DAGs MSA-similarity Eukaryotes by Kingdoms",
                      heatmap_legend_param=list(
                        title="Similarity",
                        at = seq(0,1,by=0.1)),
                      col=rev(viridis(256)),
                      cluster_rows = FALSE,
                      cluster_columns = FALSE,
                      top_annotation = annotationK,
                      show_column_names = FALSE, 
                      show_row_names = FALSE,
                      left_annotation =
                        rowAnnotation(df = dff,
                                      col = colorsK,
                                    show_annotation_name=FALSE,
                                    show_legend=FALSE
                                      ))







Mun_heat_1<- Heatmap(matrix = Sim_Mun_mDAG, 
             column_title="mDAGs Munkres-similarity  Eukaryotes by Kingdoms",
            name = "Munkres Similarity",
            heatmap_legend_param=list(
                        title="Similarity",
                        at = seq(0,1,by=0.1)),
                      col=rev(viridis(256)),
                      cluster_rows = FALSE,
                      cluster_columns = FALSE,
                      top_annotation = annotationK,
                      show_column_names = FALSE, 
                      show_row_names = FALSE,
                      left_annotation =
                        rowAnnotation(df = dff,
                                      col = colorsK,
                                    show_annotation_name=FALSE,
                                    show_legend=FALSE
                                      ))
```

```{r, fig.align='center', fig.height=5, cache=TRUE}
meta_animals= meta_taxo[1:884,] %>% filter(Kingdom=="Animals")

dff<-meta_taxo %>%
  filter(Kingdom=="Animals") %>% 
  select(Phylum,Freq_Phylum) %>%   
  as.data.frame() %>% select(Phylum)

namesP=dff %>% distinct( Phylum, .keep_all = TRUE) 
namesP=namesP$Phylum
dff$Phylum=ordered(dff$Phylum,labels=namesP)
col=rainbow(length(namesP))
colorsP=list(Phylum=col)
names(colorsP$Phylum)=namesP
annotation_H2 <- HeatmapAnnotation(df=dff, col = colorsP)
MSA_heat_2 <- Heatmap(matrix =
                        Sim_MSA_mDAG[1:nrow(dff),1:nrow(dff)],
                      column_title="mDAGs MSA-similarity  Animals by Phyla",
                      col=rev(viridis(256)),
                      cluster_rows = FALSE,
                      show_heatmap_legend=FALSE, 
                      cluster_columns = FALSE,
                      top_annotation = annotation_H2,
                      show_column_names = FALSE, 
                      show_row_names = FALSE,
                      left_annotation = 
                        rowAnnotation(df = dff,
                                      col = colorsP,
                                      show_annotation_name=FALSE,
                                      show_legend =FALSE
                                      ))



Mun_heat_2 <- Heatmap(matrix = Sim_Mun_mDAG[1:nrow(dff),1:nrow(dff)], 
              column_title="mDAGs Munkres-similarity  Animals by Phyla",
        col=rev(viridis(256)),
    show_heatmap_legend=FALSE, 
        cluster_rows = FALSE,
        cluster_columns = FALSE,
        top_annotation = annotation_H2,
        show_column_names = FALSE, 
        show_row_names = FALSE,
        left_annotation = rowAnnotation(df = dff,
                                        col = colorsP,
                                    show_annotation_name=FALSE,
                                        show_legend =FALSE
                                        ))

```

```{r heatmaps}
MSA_heat_1
MSA_heat_2
Mun_heat_1
Mun_heat_2
```

```{r echo=FALSE, include=FALSE}
pdf("MSA_kingdoms.pdf")
MSA_heat_1
dev.off()
pdf("MSA_phyla.pdf")
MSA_heat_2
dev.off()
pdf("Mun_kingdoms.pdf")
Mun_heat_1
dev.off()
pdf("Mun_phyla.pdf")
Mun_heat_2
dev.off()
```

## MDS (Multidimensional Scaling) MSA

```{r, fig.align='center', fig.height=5, cache=TRUE}

## Metric multidimensional scaling (mMDS)
mds7 <- cmdscale(sqrt(1-Sim_MSA_mDAG^2),k=7,eig=TRUE)
#pairs(mds7$points[,1:4])
mds7$GOF
mds <- mds7$points %>%  as_tibble()
colnames(mds) <-paste0("Dim.",1:dim(mds7$points)[2])


cooordinates=as_tibble(mds7$points)
colnames(cooordinates)=paste("Component",1:7)
ggpairs(cooordinates,columns=1:4,
        aes(color=meta_taxo$Kingdom[1:884],alpha=0.5,
            title="MDS 4 dimensions projection",
            legend=1),upper=list(continuous="points")) +
  scale_fill_manual(values = colorsK$Kingdom) + 
  theme(legend.position = "left")
```

# Hierarchical cluster MSA

```{r}
library(dendextend)
library(ggraph)
library(ape)

D=as.dist(sqrt(1-Sim_MSA_mDAG^2))
hc_MSA=hclust(as.dist(D),method ="ward.D")
library(circlize)
circlize_dendrogram(as.dendrogram(hc_MSA))
```

```{r}
clust4_MSA=cutree(hc_MSA,4)
table(clust4_MSA,meta_taxo$Kingdom[1:884])
```

```{r}
clust5_MSA=cutree(hc_MSA,5)
table(clust5_MSA,meta_taxo$Kingdom[1:884])
```

```{r}
clust6_MSA=cutree(hc_MSA,6)
table(clust6_MSA,meta_taxo$Kingdom[1:884])
```

```{r}
aux=meta_taxo[1:884,] %>%
  select(Organism,Kingdom,Phylum,Class,Full_Name)
aux$clust4_MSA=clust4_MSA
aux_Animals_cluster_1_2 = aux %>%
  filter(Kingdom=="Animals",clust4_MSA %in% c(1,2))

table(aux_Animals_cluster_1_2$Phylum,aux_Animals_cluster_1_2$clust4_MSA)

aux_9_Animals_cluster_3= filter(aux,
                                clust4_MSA==3,
                                Kingdom=="Animals")
aux_9_Animals_cluster_3
aux_all_Nematodes_Flatworns= aux %>% 
  filter(Kingdom=="Animals",
         Phylum %in% c("Nematodes","Flatworms"))
aux_all_Nematodes_Flatworns
aux_14_Plants_clust2= filter(aux,clust4_MSA==3,
                             Kingdom=="Plants")
aux_14_Plants_clust2
aux_all_algae_class= aux %>% 
  filter(Kingdom=="Plants",
         Class %in% c("algae"))
aux_all_algae_class
```

The hierarchical classification by Ward's method recovers the kingdom Animal clusters 1 (all vertebrates) and 2 (invertebrate animals), cluster 4 the Plants and in cluster 3 are all protists and fungi together with 9 animals and 14 plants.

The 9 Animals are all from the Phylum Nematodes or Flatworns, out of the total of the 10 species of these phylums considered in the experiment. Only the Nematode Necator americanus (New World hookworm) is classified in Animals.

The 14 plants in cluster 2 are all algae considered in the experiment.

## MDS (Multidimensional Scaling) Munkres

```{r, fig.align='center', fig.height=5}
## Metric multidimensional scaling
mds7 <- cmdscale(sqrt(1-Sim_Mun_mDAG^2),k=7,eig=TRUE)
mds7$GOF
mds <- mds7$points %>%  as_tibble()
colnames(mds) <-paste0("Dim.",1:dim(mds7$points)[2])

cooordinates=as_tibble(mds7$points)
colnames(cooordinates)=paste("Component",1:7)
ggpairs(cooordinates,columns=1:4,
        aes(color=meta_taxo$Kingdom[1:884],
            title="MDS 4 dimensions projection",legend=1),
        lower=list(continuous="points")) + 
  scale_fill_manual(values = colorsK$Kingdom) + 
  theme(legend.position = "left")
```

## Hierarchical cluster Munkres

```{r}
D=as.dist(sqrt(1-Sim_Mun_mDAG^2))
hc_Mun=hclust(as.dist(D),method ="ward.D")
ggplot(as.ggdend(as.dendrogram(hc_Mun)))
```

```{r}
clust4_Mun=cutree(hc_Mun,4)
table(clust4_Mun,meta_taxo$Kingdom[1:884])
```

Only two nematodes of the 9 return to the invertebrate animal cluster for Munkrest; all algae remain in the fungi and archaea cluster.

```{r}
aux=meta_taxo[1:884,] %>%
  select(Organism,Kingdom,Phylum,Class,Full_Name)
aux$clust4_Mun=clust4_Mun
aux_Animals_cluster_1_2_Mun = aux %>%
  filter(Kingdom=="Animals",clust4_Mun %in% c(1,2))

table(aux_Animals_cluster_1_2_Mun$Phylum,
      aux_Animals_cluster_1_2_Mun$clust4_Mun)

aux_7_Animals_cluster_3_Mun= filter(aux,
                                clust4_Mun==3,
                                Kingdom=="Animals")
aux_7_Animals_cluster_3_Mun
aux_all_Nematodes_Flatworns= aux %>% 
  filter(Kingdom=="Animals",
         Phylum %in% c("Nematodes","Flatworms"))
aux_all_Nematodes_Flatworns

aux_14_Plants_clust2_Mun= filter(aux,clust4_Mun==3,
                             Kingdom=="Plants")
aux_14_Plants_clust2_Mun
aux_all_algae_class= aux %>% 
  filter(Kingdom=="Plants",
         Class %in% c("algae"))
aux_all_algae_class
```

## Similarity comparison Eukaryotes

Comparison of two similarities

Load the similarities for pairs and comparison

```{r}
n=length(meta_taxo$mDAG_Id[1:884])
n
dim(Sim_MSA_mDAG)

aux=as_tibble(Sim_MSA_mDAG)
aux$mDag=names(aux)
aux=aux %>% pivot_longer(cols=`0313`:`0300`,
                         names_to="mDag_2",
                         values_to="Sim_MSA")

aux_2= aux %>%  mutate(i=pmax(as.integer(mDag),
                              as.integer(mDag_2)),
                       j=pmin(as.integer(mDag),
                       as.integer(mDag_2))) %>% unite("ij",i:j) %>%
  filter(duplicated(ij))


aux=as_tibble(Sim_Mun_mDAG)
aux$mDag=names(aux)
aux=aux %>% pivot_longer(cols=`0313`:`0300`,
                         names_to="mDag_2",
                         values_to="Sim_Mun")
aux_2 = aux_2 %>% left_join(aux)

Sim_comp=aux_2
rm(aux,aux_2)
```

**Spearman and Pearson correlations**

```{r}
cor(Sim_comp[,c(3,5)],method="spearman")
cor(Sim_comp[,c(3,5)],method="pearson")
```

```{r}
GGally::ggpairs(Sim_comp[,c(3,5)])
```

```{r}
aux= Sim_comp%>% pivot_longer(
  cols=c(Sim_MSA,Sim_Mun),
  names_to="Method",
  values_to="Similarity")

ggstatsplot::ggbetweenstats(
  data = aux,
  x = Method,
  y = Similarity,
  centrality.plotting=TRUE)
```

# Graph

Some statistics for graphs

## Read all graphs from a level of the experiment

Read all graphs from a level from experiment; for example individuals. We read only firts (alphabetic) two graph

```{r}
#path_exp="data/result_bb261b6e-95c6-3e39-b82b-b68eea80e30b/data/"
list_names=dir(paste0(path_exp,"Individuals/"))

list_names= list_names[-1] # filter 0000_RefPw
length(list_names)


graphs_list=paste0(path_exp,"Individuals/",
                   list_names,"/",list_names,
                   "_MDAG.graphml")
```

```{r}
knitr::include_graphics(
  paste0(path_exp,"Individuals/cang/cang_RC.pdf"))
```

## Graph statistics

```{r}
read_mDAG=function(x) {DAG=read.graph(file=x,
                                  format="graphml")
  return(DAG)}
mDAG_componets=function(x) {
  sort(components(x,mode = "weak")$csize,
       decreasing=TRUE)
  }

compo_list=lapply(graphs_list,
                  FUN=function(x) {
                    gg=read_mDAG(x)
                  aux=list(
                    mDAG_componets=mDAG_componets(gg),
                    degree_count=igraph::degree(gg,mode="total"))
                    return(aux)}
                  )

names(compo_list)=list_names
n=max(sapply(compo_list,FUN=function(x) {length(x[[1]])}))
n
size_compo_list=lapply(compo_list,FUN=function(x) {
  return(c(x[[1]],rep(NA,n-length(x[[1]]))))})

aux=do.call(bind_cols,size_compo_list)
aux2=pivot_longer(aux,aaf:zvi,names_to="Organism",
                  values_to="csize") %>%
  arrange(Organism,-csize)
aux2$index=rep(1:n,times=dim(aux)[2])
aux2=aux2 %>%
  left_join(meta_taxo,by="Organism")
```

```{r}
Organism=names(compo_list)
big_MBB=function(org){
  x=Results %>% filter(Organism==org)
  x=as.character(x[1,5:dim(Results)[2]])
  x=x[x!="NA"]
  tt=sort(table(x),decreasing=TRUE)
  return(tt)
  }
big_MBB_list= lapply(Organism,FUN=function(x) big_MBB(x))
nMBB=max(sapply(big_MBB_list,FUN=function(x) length(x)))
nMBB
big_MBB_list=lapply(big_MBB_list,
                    FUN=function(x){
                      x=c(x,rep(NA,nMBB-length(x)))
                      return(x)}
)
names(big_MBB_list)=Organism
big_MBB_list=do.call(bind_cols,big_MBB_list)

kMBB=nrow(big_MBB_list)
index=rep(1:kMBB,times=length(Organism))

big_MBB_list2=pivot_longer(big_MBB_list,
                           cols=names(big_MBB_list),
                           values_to = "MBBsize",
                           names_to = "Organism") %>% 
  arrange(Organism,-MBBsize) %>%  
  mutate(index=index) %>% 
  left_join(meta_taxo,by="Organism")
```

### Sizes of MBB for each mDAG

```{r}
COLOR_KINGDOM=c("red","green","yellow","black")
colors_kingdom=big_MBB_list2 %>%
  select(Organism,Kingdom) %>%
  distinct()

names(COLOR_KINGDOM)=sort(unique(colors_kingdom$Kingdom))

p0<-ggplot(data=big_MBB_list2) + 
  geom_line(mapping=aes(x=index,
                        y=MBBsize,
                        group = Organism,
                        color=Kingdom)) + 
  scale_y_continuous(trans='log10') + 
  scale_x_continuous(trans='identity') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom]) +
   ggtitle("Plot log-identity of MBB \n  decreasing index.") +
  ylab("Log10 MBB size") + xlab("Index")


p1<- ggplot(data=big_MBB_list2) + 
  geom_line(mapping=aes(x=index,
                        y=MBBsize,
                        group = Organism,color=Kingdom),
                        na.rm=TRUE) + 
  scale_x_continuous(trans='log10') + 
  scale_y_continuous(trans='log10') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom]) +
   ggtitle("Plot log10-log10identity of MBB \n  decreasing index.") +
  ylab("Log10 MBB size") + xlab("Log10 Index")

p2<- ggplot(data=big_MBB_list2) + 
  geom_line(mapping=aes(x=index,
                        y=MBBsize,
                        group = Organism, 
                        color=Kingdom),
            na.rm=TRUE)+
   scale_x_continuous(trans="identity") + 
   scale_y_continuous(trans="identity") + 
  ylim(0,1039)+ 
  ggtitle("Plot  of MBB sized  decreasing index.") +
  ylab("MBB size") + xlab("Index") +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])


p0
p1
p2
```

### Sizes of weak components for each mDAG

```{r}
COLOR_KINGDOM=c("red","yellow","green","yellow","black")
colors_kingdom=aux2%>% select(Organism,Kingdom) %>% distinct()
names(COLOR_KINGDOM)=sort(unique(colors_kingdom$Kingdom))

p0<-ggplot(data=aux2) + 
  geom_line(mapping=aes(x=index,
                        y=csize,
                        group = Organism,
                        color=Kingdom),
            na.rm=TRUE) + 
  scale_x_continuous(trans='log10') + 
  scale_y_continuous(trans='identity') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom]) +
   ggtitle("Plot log-identity of size  weak components decreasing index.") +
  ylab("Log10 Weak componente size") + xlab("Index")


p1<- ggplot(data=aux2) + 
  geom_line(mapping=aes(x=index,
                        y=csize,group = Organism,
                        color=Kingdom),
            na.rm=TRUE) + 
  scale_y_continuous(trans='log10') + 
  scale_x_continuous(trans='log10') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])+
   ggtitle("Plot log-log of size  weak components decreasing index.") +
  ylab("Log10 weak component size") + xlab("Log10 Index")

p2<- ggplot(data=aux2) + 
  geom_line(mapping=aes(x=index,
                        y=csize,group = Organism,
                        color=Kingdom),
            na.rm=TRUE) + 
   scale_x_continuous(trans="identity") + 
  scale_y_continuous(trans="identity") +
  ylim(0,1039)+
   ggtitle("Plot  of size  weak components decreasing index.")+
  ylab("Weak components size") + xlab("Index")+
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])


p0
p1
p2
```

```{r}
data2=big_MBB_list2 %>% filter(index %in% 2:20)
p3<- ggplot(data=data2) + 
  geom_line(mapping=aes(x=index,
                        y=MBBsize,
                        group = Organism,
                        color=Kingdom),
            na.rm=TRUE)+
  scale_x_continuous(trans="identity") + 
  scale_y_continuous(trans="identity") +
  ylim(0,25)+
  ggtitle("Plot  of size  weak components  decreasing index 2 to 20.")+
  ylab("Weak components size") + xlab("Index")+
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])

p3
```

# Comparison core's all algaes, fungi and archaea and clusters

```{r}
reactions=names(Results)
reactions=reactions[grep("(^R\\d{5})",reactions)]
reactions=tibble(reactions)
reactions=reactions %>% separate(reactions, into=c("r_id","enzyme"),sep="\\(",remove=FALSE)
reactions=reactions %>% mutate(enzyme=gsub("\\(|\\)","",enzyme))
#reactions=reactions[,-3]
reactions$rev=stringr::str_detect(reactions$r_id,"v")
```

## Comparion 4 kingdoms and 4 cluster for MSA and Munkrest

```{r}
clust4_MSA2=tibble(mDAG_Id=names(clust4_MSA), clust4_MSA=clust4_MSA)
clust4_Mun2=tibble(mDAG_Id=names(clust4_Mun), clust4_Mun=clust4_Mun)
meta_taxo2=meta_taxo
meta_taxo2=meta_taxo2 %>% left_join(clust4_MSA2,by= "mDAG_Id") %>% 
  left_join(clust4_Mun2,by= "mDAG_Id")
meta_taxo2$combined_cluster_MSA_Kingdom=paste0(meta_taxo2$Kingdom,meta_taxo2$clust4_MSA)
meta_taxo2$combined_cluster_Mun_Kingdom=paste0(meta_taxo2$Kingdom,meta_taxo2$clust4_MSA)
write.csv(meta_taxo2,file="meta_taxo_4_clusters.csv")
```

```{r}
knitr::kable(table(meta_taxo2$Kingdom,meta_taxo2$clust4_MSA))
knitr::kable(table(meta_taxo2$Kingdom,meta_taxo2$clust4_Mun))
knitr::kable(table(meta_taxo2$clust4_Mun,meta_taxo2$clust4_MSA))
```

```{r}
library(reshape2)
MSA_table=melt(table(meta_taxo2$Kingdom,meta_taxo2$Phylum,meta_taxo2$clust4_MSA))
names(MSA_table)=c("Kingdom","Phylum","cluster_MSA","N")
MSA_table=MSA_table %>% filter(N!=0)
```

```{r}
knitr::kable(MSA_table)
```

## Comparison core's all algaes, fungi and archaea

```{r}
#reactions=names(Results)[-c(1:5)]
#cores=tibble(reactions)
#cores=cores %>%  separate(reactions, into=c("reactions","enzyme"),sep="\\(")
#cores$enzyme=gsub("\\(|\\)",replacement = "",cores$enzyme)
#cores
#algae_core=
```

```{r}
#Results
#cores
#meta_taxo
cores_names=unique(Results$Groups)
cores_names

cores_combi=function(x){
#x=cores_names[1]  
Id=meta_taxo2 %>% filter(Groups==x) %>% select(mDAG_Id)
Id=as.character(Id$mDAG_Id)
#bin_NA=function(x) {case_when(!is.na(x) ~ 0 ,default=1)}
not_NA= function(x) {!is.na(x)}

mda_filter= Results %>%
  filter(mDAG_Id %in% Id) %>%
  select(starts_with("R")) %>%   
  mutate_all(not_NA) %>% mutate_all(as.integer)

#%>%
# mutate(mDag_id=Id,.before=1)
#aux=colSums(mda_filter)
#aux=as.integer(aux==length(Id))
return(mda_filter)
}

#cores_combi("Cluster1")
cores_list=lapply(cores_names,cores_combi)
names(cores_list)=cores_names
lapply(cores_list,dim)
cores_raw=lapply(cores_list,FUN=function(X){apply(X,2,prod)})

aux=cores_raw %>% as_tibble(.name_repair ="universal")
#names(aux)=cores_names
cores_reactions = cbind(reactions,aux)
```

```{r}
#names(cores)
#knitr::kable(colSums(cores[,-c(1,2)]),col.names = c("Freq"))
```

```{r}
 cores_reactions %>% select(reactions,`MSA.Cluster.3.MUN.Cluster.3`) %>%
  filter(`MSA.Cluster.3.MUN.Cluster.3`==1) %>%
  mutate(http=paste0("https://www.genome.jp/entry/",
                     reactions))-> aux
```

```{r}
knitr::kable(aux)
```






