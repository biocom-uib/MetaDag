```{r  include=FALSE,message=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      cache= TRUE,
                      warning = FALSE,
                      message = FALSE, out.width = "100%")
pdf="TRUE"
```

```{r  message=FALSE,echo=FALSE}
library(tidyverse)
library(igraph)
library(ComplexHeatmap)
library(viridis)
library(circlize)
library(plotly)
library(randomcoloR)
library(factoextra)
library(RColorBrewer)
library(kableExtra)
library(igraph)
library(GGally)
```

As an illustrative example for interpreting [metaDAG](https://bioinfo.uib.es/metadag/) results, we consider here the Eukaryotes test presented in Section 2.5. Namely, we consider all Eukaryotes from the KEGG database.

First of all, results must be downloaded from:

Hash: [0a845f74-826e-3b46-aed9-e7ecf74db262](https://bioinfo.uib.es/metadag/handleExperiment/result_0a845f74-826e-3b46-aed9-e7ecf74db262){.uri}

URL: (https://bioinfo.uib.es/metadag/handleExperiment/result_0a845f74-826e-3b46-aed9-e7ecf74db262)

and saved in the folder:

"data/result_0a845f74-826e-3b46-aed9-e7ecf74db262".

```{r setup_load_data, include=FALSE,message=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      cache=FALSE,
                      warning = FALSE,
                      message = FALSE, out.width = "100%")
pdf="TRUE"
```

```{r  tidy,message=FALSE}
library(tidyverse)
library(igraph)
library(ComplexHeatmap)
library(viridis)
library(circlize)
library(plotly)
library(randomcoloR)
library(factoextra)
library(RColorBrewer)
library(kableExtra)
library(igraph)
library(GGally)
```

```{r setup, echo=FALSE,include=FALSE}
knitr::include_graphics("figures/screen_1.png")
```

```{r echo=FALSE}
knitr::include_graphics("figures/screen_2.png")
```

```{r echo=FALSE}
knitr::include_graphics("figures/screen_3.png")
```

```{r echo=FALSE}
knitr::include_graphics("figures/screen_4.png")
```

```{r  include=FALSE,message=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      cache=FALSE,
                      warning = FALSE,
                      message = FALSE, out.width = "100%")
pdf="TRUE"
```

```{r message=FALSE,echo=FALSE}
library(tidyverse)
library(igraph)
library(ComplexHeatmap)
library(viridis)
library(circlize)
library(plotly)
library(randomcoloR)
library(factoextra)
library(RColorBrewer)
library(kableExtra)
library(igraph)
library(GGally)
```

# Load data

```{r}
experiment=
  "result_0a845f74-826e-3b46-aed9-e7ecf74db262/"
path_exp=paste0("data/",experiment)
knitr::kable(data.frame(
  Directory_files_and_folders=dir(path_exp),
  Type=c(rep("Data file",2),
  rep("Directory",3),
  rep("Data file",6),
  "Directory")))
```

```{r}
MBB=read_csv(paste0(path_exp,"Different_MBB.csv"),
             show_col_types = FALSE)
mDAG=read_csv(paste0(path_exp,"Different_mDAG.csv"),
              show_col_types = FALSE)
```

## Load metadata

Organisms are sorted by Kingdom, Phylum and Class:

```{r}
path_exp
Results=read_csv(paste0(path_exp,"Results.csv"))
#rename MetaDaG variables
names(Results)[c(1,2,3,4,5)]=c("Organism","Categories","Groups","mDAG_Id","Full_Name")
taxo=Results %>% select(Organism:Full_Name)
taxo=taxo %>% separate(Categories,into=c("Kingdom","Phylum","Class"))
index=which(is.na(taxo$Class))
taxo$Class[index]=paste(taxo$Phylum[index])
meta_taxo=taxo
aux=table(meta_taxo$Phylum)
Freq_Phylum=tibble(Phylum=names(aux),Freq_Phylum=aux)
names(Freq_Phylum)=c("Phylum","Freq_Phylum")
aux=table(meta_taxo$Class)
Freq_Class=tibble(Class=names(aux),Freq_Class=aux)
names(Freq_Class)=c("Class","Freq_Class")


meta_taxo = meta_taxo %>% 
  left_join(Freq_Phylum) %>%
  left_join(Freq_Class)
meta_taxo = meta_taxo %>% 
  arrange(Kingdom,desc(Freq_Phylum),Phylum,
          desc(Freq_Class),Class)
head(meta_taxo)
```

```{r}
table(meta_taxo$Kingdom) %>% kable %>%
  kable_styling("striped", full_width = F,position="left")%>% 
 scroll_box(width = "400px", height = "200px")
table(meta_taxo$Phylum,meta_taxo$Kingdom) %>% kable %>%
  kable_styling("striped", full_width = F,position="left")%>% 
 scroll_box(width = "500px", height = "500px")
```

## Table of MBBs

In this example `MBB` is a table with `r nrow(MBB)` rows and `r ncol(MBB)` columns. It displays, for every MBB, the selected groups (Kingdoms, families, etc.) to which it belongs.

```{r}
#100
knitr::kable(MBB[1:20,1:10]) %>%   
  scroll_box(width = "100%", height = "200px")
```

## Table of m-DAGs

In this example `mDAG` is a table with `r nrow(mDAG)` rows and `r ncol(mDAG)` columns. It displays, for every m-DAG, the selected groups (Kingdoms, families, etc.) in which it belongs.

```{r}
kable(mDAG[1:20,1:10]) %>%   scroll_box(width = "100%", height = "200px")
```

```{r}
dim(mDAG)
names(mDAG)[1:6]
head(names(mDAG)[7:(dim(mDAG)[2]-1150)])
# 28 to 1213  code MBB: 1 if MBB in mDAG 0
```

## Results Table

The `Results` table contains for every organism (row) the following information: its category (taxonomy), selected group, Full name, m-DAG id and all reactions name id with their corresponding enzyme. When a reaction is present in the corresponding m-DAG, the MBB to which it belongs is displayed in this column.

```{r}
kable(Results[1:20,1:10])%>%
  row_spec(0, angle = 0) %>%   
  scroll_box(width = "300%", height = "1000px")
```

```{r}
dim(Results)
names(Results)[1]# organisms  kegg id  class representant of mDAG
names(Results)[2]# taxonomy separate by |
names(Results)[3]# groups 
names(Results)[4]# mDAG_Id 
names(Results)[5]# Full name representant
names(Results)[6:36]# columns 6 to 3998 
# reactions name id with its enzyme.
```

```{r}
reactions=names(Results)[-c(1:5)]
reverse_reactions=stringr::str_detect(reactions,"rev")
reverse_reactions=table(reverse_reactions)
dimnames(reverse_reactions)$reverse_reactions=
  c("Non reverse reaction","Reverse reaction")
reverse_reactions
```

```{r  include=FALSE,message=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      cache=FALSE,
                      warning = FALSE,
                      message = FALSE, out.width = "100%")
pdf="TRUE"
```

```{r message=FALSE,echo=FALSE}
library(tidyverse)
library(igraph)
library(ComplexHeatmap)
library(viridis)
library(circlize)
library(plotly)
library(randomcoloR)
library(factoextra)
library(RColorBrewer)
library(kableExtra)
library(igraph)
library(GGally)
```

# Metabolic Graphs

We present here some analysis examples of the metabolic graphs generated in GraphML format.

## Metabolic graphs for each organism

Read the individual metabolic graphs generated for Homo sapiens (KEGG id: hsa) in the directory(Individuals/hsa)

```{r}
experiment=
  "result_0a845f74-826e-3b46-aed9-e7ecf74db262/"
path_exp=paste0("data/",experiment)
files_hsa=dir(paste0(path_exp,"Individuals/hsa"))
files_hsa
```

```{r echo=FALSE}
files_hsa=dir(paste0(path_exp,"Individuals/hsa"))
# "plot mDAG pdf format",
#             "plot mDAG svg format",
type_file=c("m-DAG GraphML format",
            "m-DAG pdf graphic",
            "m-DAG svg graphic",
            "csv file with the adjacency matrix of the m-DAG",
            "pdf graphic with the biggest conected componet of the m-DAG",
            "svg graphic with the biggest conected componet of the m-DAG ",
            "csv file with the node (MBBs) labels  of the m-DAG", 
            "csv file with all connected components of the m-DAG",
            "csv file with the  adjacency matrix of the reaction graph",
            "csv file with the node (reactions) labels  of the reaction graph", 
            "reaction graph  GraphML format",
            "reaction graph pdf graphic",
            "reaction graph svg graphic",
            "text summary file with the number of MBBs, reactions, etc. in the previous graphs"
            )
knitr::kable(data.frame(files_Individual_hsa=files_hsa, Description=type_file))
```

## Pan & core metabolic graphs

Pan and core metabolic graphs for every group were generated. For instance, one can read the pan and core metabolic graphs generated for the group Algae in the directory (Groups/Algae).

```{r}
files_Algae=dir(paste0(path_exp,"Groups/Algae"))
files_Algae
```

The global core reaction graph, which is the core of all the organisms' reaction graphs in this Eukaryotes test, is empty.

```{r graph_core_ALL}
graph_core_RC=read.graph(
  paste0(path_exp,
         "Global/core/core_RC.graphml"),
  format = "graphml")
summary(graph_core_RC)
```

The global core reaction graph has `r igraph::vcount(graph_core_RC)` vertex and `r igraph::ecount(graph_core_RC)` edges. It is an empty graph.

The core reaction graph for the Algae group is:

```{r fig.cap="Algae core reaction graph"}
knitr::include_graphics(
  paste0(path_exp,"Groups/MSA_Cluster_3/core/MSA_Cluster_3_core_RC.pdf"))
```

The global core m-DAG, i.e., the core of all organisms in this example is empty.

```{r}
graph_core_mDAG=read.graph(
  paste0(path_exp,"Global/core/core_mDAG.graphml"),
  format = "graphml")
summary(graph_core_mDAG)
```

The global core m-DAG has `r igraph::vcount(graph_core_mDAG)` vertex and `r igraph::ecount(graph_core_mDAG)` edges. It is an empty graph.

The core metabolic DAG for the Algae group is:

```{r fig.cap="Core m-DAG for Algae"}
knitr::include_graphics(paste0(path_exp,                              "Groups/Algae/core/Algae_core_mDAG.pdf"))
```

The global pan reaction graph for the Animals Kingdom is:

```{r}
graph_pan_RC=read.graph(
  paste0(path_exp,
         "TaxonomyLevels/Kingdom/Animals/pan/Animals_pan_RC.graphml"),
  format = "graphml")
summary(graph_pan_RC)
```

This pan reaction graph has `r igraph::vcount(graph_pan_RC)` nodes and `r igraph::ecount(graph_pan_RC)` edges.

## Graph's topology

From the GraphML files, one can extract topological information. Some examples are as follows.

The diagram below illustrates the distribution of node degrees for an m-DAG.

```{r}
graph_mDAG=read.graph(
  paste0(path_exp,
         "Individuals/hsa/hsa_mDAG.graphml"),
  format= "graphml")
summary(graph_mDAG)
barplot(table(igraph::degree(graph_mDAG,mode="all")),
              ylim=c(0,350),col="blue",
              main="Frequency of Node Degrees",
              ylab="Frequency",xlab="Degree")
```

The connected components of every graph as well as the size of every connected component can be obtained as:

```{r}
compo=components(graph_mDAG,mode = "weak")
str(compo)
compo$csize
k=which.max(compo$csize==max(compo$csize))
k
table(compo$membership)
vertex=which(compo$membership==k)
length(vertex)
Big_Component=induced_subgraph(graph_mDAG, vids=vertex)
igraph::vcount(Big_Component)
igraph::ecount(Big_Component)
```

And the plot of the bigger component of the m-DAG in Homo sapiens is:

```{r fig.align='center',title="Bigger componet of hsa mDAG"}
knitr::include_graphics(paste0(path_exp,
                    "Individuals/hsa/hsa_mDAG_biggerDAG.pdf"))
```

```{r}
#path_exp="data/result_bb261b6e-95c6-3e39-b82b-b68eea80e30b/data/" 
list_names=dir(paste0(path_exp,"Individuals/"))
list_names= list_names[-1] # filter 0000_RefPw
length(list_names) 
graphs_list=paste0(path_exp,"Individuals/", list_names,"/",list_names, "_MDAG.graphml")
```

```{r}
knitr::include_graphics(
paste0(path_exp,"Individuals/cang/cang_RC.pdf"))
```

## Graph statistics

The number of connected component in each generated m-DAG with their frequency in the entire set of m-DAGs, can be obtained as follows:

```{r ,warning=FALSE}
read_mDAG=function(x) {DAG=read.graph(file=x,
                                  format="graphml")
  return(DAG)}
mDAG_componets=function(x) {
  sort(components(x,mode = "weak")$csize,
       decreasing=TRUE)
  }

compo_list=lapply(graphs_list,
                  FUN=function(x) {
                    gg=read_mDAG(x)
                  aux=list(
                    mDAG_componets=mDAG_componets(gg),
                    degree_count=igraph::degree(gg,mode="total"))
                    return(aux)}
                  )

names(compo_list)=list_names
n=max(sapply(compo_list,FUN=function(x) {length(x[[1]])}))
n
size_compo_list=lapply(compo_list,FUN=function(x) {
  return(c(x[[1]],rep(NA,n-length(x[[1]]))))})

aux=do.call(bind_cols,size_compo_list)
weak_componets_size=pivot_longer(aux,aaf:zvi,names_to="Organism",
                  values_to="csize") %>%
  arrange(Organism,-csize)
weak_componets_size$index=rep(1:n,times=dim(aux)[2])
weak_componets_size=weak_componets_size %>%
  left_join(meta_taxo,by="Organism")
```

```{r ,warning=FALSE}
Organism=names(compo_list)
big_MBB=function(org){
  org="hsa"
  x=Results %>% filter(Organism==org)
  x=as.character(x[1,5:dim(Results)[2]])
  x=x[x!="NA"]
  tt=sort(table(x),decreasing=TRUE)
  return(tt)
  }
big_MBB_list= lapply(Organism,FUN=function(x) big_MBB(x))
nMBB=max(sapply(big_MBB_list,FUN=function(x) length(x)))
nMBB
big_MBB_list=lapply(big_MBB_list,
                    FUN=function(x){
                      x=c(x,rep(NA,nMBB-length(x)))
                      return(x)}
)
names(big_MBB_list)=Organism
big_MBB_list=do.call(bind_cols,big_MBB_list)

kMBB=nrow(big_MBB_list)
index=rep(1:kMBB,times=length(Organism))

big_MBB_list2=pivot_longer(big_MBB_list,
                           cols=names(big_MBB_list),
                           values_to = "MBBsize",
                           names_to = "Organism") %>% 
  arrange(Organism,-MBBsize) %>%  
  mutate(index=index) %>% 
  left_join(meta_taxo,by="Organism")
```






We can visualize the sizes of the weak components  for each m-DAG, using colors to represent the different Kingdoms, also we scale the results by a log-log plot:



```{r}
COLOR_KINGDOM=c("red","yellow","green","black")
colors_kingdom=weak_componets_size%>% select(Organism,Kingdom) %>% distinct()
names(COLOR_KINGDOM)=sort(unique(colors_kingdom$Kingdom))

p1<- ggplot(data=weak_componets_size) + 
  geom_line(mapping=aes(x=index,
                        y=csize,group = Organism,
                        color=Kingdom),
            na.rm=TRUE) + 
   scale_x_continuous(trans="identity") + 
  scale_y_continuous(trans="identity") +
  ylim(0,640)+
   ggtitle("Plot of weak components size decreasing order.")+
  ylab("Weak components size") + xlab("Order")+
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])

p2<- ggplot(data=weak_componets_size) + 
  geom_line(mapping=aes(x=index,
                        y=csize,group = Organism,
                        color=Kingdom),
            na.rm=TRUE) + 
  scale_y_continuous(trans='log10') + 
  scale_x_continuous(trans='log10') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])+
   ggtitle("Plot log10-log10 of size  weak components decreasing order.") +
  ylab("Log10 weak component size") + xlab("Log10 order")
p1
p2
```
A table with the frequencies of the weak connected components sizes, displayed by Kingdom, can be obtained as follows:

```{r}
aux=table(weak_componets_size$csize,weak_componets_size$Kingdom)
table_wcc_size=tibble(Order=1:dim(aux)[1],
                        Wcc_size=as.integer(unlist(dimnames(aux)[1])),
                        Animals=aux[,1],
                      Fungi=aux[,2],
                      Plants=aux[,3],
                      Protists=aux[,4])
knitr::kable(table_wcc_size)
```



A table with the frequencies of the MBBs sizes displayed by Kingdom can be obtained as follows:

```{r}
aux=table(big_MBB_list2$MBBsize,big_MBB_list2$Kingdom)
table_MBB_size=tibble(Order=1:dim(aux)[1],
                        MBB_size=as.integer(unlist(dimnames(aux)[1])),
                        Animals=aux[,1],
                      Fungi=aux[,2],
                      Plants=aux[,3],
                      Protists=aux[,4])
knitr::kable(table_MBB_size)
```



# m-DAGs similarities and Metadata

First, we will load the metadata and adjust them to match the structure of the similarities. This will facilitate the creation of graphs and statistics.

Keep in mind the path of the experiment:

```{r}
experiment=
  "result_0a845f74-826e-3b46-aed9-e7ecf74db262/"
path_exp=paste0("data/",experiment)
```

## MSA & Munkres similarities

In this section, we will present the similarities between m-DAGs considering the two similarity meausures described in the paper. Namely, the MSA and Munkres similarities.

The experimental data set consists of `r nrow(meta_taxo)` Eukaryotes from the animal, plant, fungus, and protists kingdoms.

```{r, echo=FALSE}
knitr::kable(table(meta_taxo$Kingdom),col.names = c("Kingdom","Abs. Freq."))
```

The similarity values are provided in the following files:

```{r}
list_Sim=dir(path_exp,pattern="^Similarities")
list_Sim
```

Load the m-DAGs similarities

```{r}
Sim_MSA_mDAG=read_csv(paste0(path_exp,
                             "Similarities_mDAG_MSAMethod.csv"))
Sim_MSA_mDAG=as.matrix(Sim_MSA_mDAG[,-1])
rownames(Sim_MSA_mDAG)=colnames(Sim_MSA_mDAG)
Sim_MSA_mDAG=Sim_MSA_mDAG[meta_taxo$mDAG_Id[1:884],
                          meta_taxo$mDAG_Id[1:884]]
```

```{r}
Sim_Mun_mDAG=read_csv(paste0(path_exp,"Similarities_mDAG_MunkresMethod.csv"))
Sim_Mun_mDAG=as.matrix(Sim_Mun_mDAG[,-1])
rownames(Sim_Mun_mDAG)=colnames(Sim_Mun_mDAG)
Sim_Mun_mDAG=Sim_Mun_mDAG[meta_taxo$mDAG_Id[1:884],meta_taxo$mDAG_Id[1:884]]
```

## Heatmaps

Here, we provide examples of heatmaps to visualize the similarities betweem m-DAGs. We again consider colors to represent the different Kingdoms.

```{r, fig.align='center', fig.height=5, cache=TRUE}
dff<-meta_taxo[1:884,] %>% select(Kingdom)  %>% as.data.frame()
colorsK <- list(Kingdom= c("Animals"="red",
                           "Plants"="green",
                           "Fungi"="yellow",
                           "Protists"="black"))
annotationK <- HeatmapAnnotation(df=dff, col = colorsK,show_legend = TRUE)

MSA_heat_1 <- Heatmap(matrix = Sim_MSA_mDAG, 
                      column_title=
                        "m-DAGs MSA-similarity Eukaryotes by Kingdoms",
                      heatmap_legend_param=list(
                        title="Similarity",
                        at = seq(0,1,by=0.1)),
                      col=rev(viridis(256)),
                      cluster_rows = FALSE,
                      cluster_columns = FALSE,
                      top_annotation = annotationK,
                      show_column_names = FALSE, 
                      show_row_names = FALSE,
                      left_annotation =
                        rowAnnotation(df = dff,
                                      col = colorsK,
                                    show_annotation_name=FALSE,
                                    show_legend=FALSE
                                      ))







Mun_heat_1<- Heatmap(matrix = Sim_Mun_mDAG, 
             column_title="m-DAGs Munkres-similarity  Eukaryotes by Kingdoms",
            name = "Munkres Similarity",
            heatmap_legend_param=list(
                        title="Similarity",
                        at = seq(0,1,by=0.1)),
                      col=rev(viridis(256)),
                      cluster_rows = FALSE,
                      cluster_columns = FALSE,
                      top_annotation = annotationK,
                      show_column_names = FALSE, 
                      show_row_names = FALSE,
                      left_annotation =
                        rowAnnotation(df = dff,
                                      col = colorsK,
                                    show_annotation_name=FALSE,
                                    show_legend=FALSE
                                      ))
```

```{r, fig.align='center', fig.height=5, cache=TRUE}
meta_animals= meta_taxo[1:884,] %>% filter(Kingdom=="Animals")

dff<-meta_taxo %>%
  filter(Kingdom=="Animals") %>% 
  select(Phylum,Freq_Phylum) %>%   
  as.data.frame() %>% select(Phylum)

namesP=dff %>% distinct( Phylum, .keep_all = TRUE) 
namesP=namesP$Phylum
dff$Phylum=ordered(dff$Phylum,labels=namesP)
col=rainbow(length(namesP))
colorsP=list(Phylum=col)
names(colorsP$Phylum)=namesP
annotation_H2 <- HeatmapAnnotation(df=dff, col = colorsP)
MSA_heat_2 <- Heatmap(matrix =
                        Sim_MSA_mDAG[1:nrow(dff),1:nrow(dff)],
                      column_title="m-DAGs MSA-similarity  Animals by Phyla",
                      col=rev(viridis(256)),
                      cluster_rows = FALSE,
                      show_heatmap_legend=FALSE, 
                      cluster_columns = FALSE,
                      top_annotation = annotation_H2,
                      show_column_names = FALSE, 
                      show_row_names = FALSE,
                      left_annotation = 
                        rowAnnotation(df = dff,
                                      col = colorsP,
                                      show_annotation_name=FALSE,
                                      show_legend =FALSE
                                      ))



Mun_heat_2 <- Heatmap(matrix = Sim_Mun_mDAG[1:nrow(dff),1:nrow(dff)], 
              column_title="m-DAGs Munkres-similarity  Animals by Phyla",
        col=rev(viridis(256)),
    show_heatmap_legend=FALSE, 
        cluster_rows = FALSE,
        cluster_columns = FALSE,
        top_annotation = annotation_H2,
        show_column_names = FALSE, 
        show_row_names = FALSE,
        left_annotation = rowAnnotation(df = dff,
                                        col = colorsP,
                                    show_annotation_name=FALSE,
                                        show_legend =FALSE
                                        ))

```

```{r heatmaps}
MSA_heat_1
MSA_heat_2
Mun_heat_1
Mun_heat_2
```

```{r echo=FALSE, include=FALSE}
pdf("MSA_kingdoms.pdf")
MSA_heat_1
dev.off()
pdf("MSA_phyla.pdf")
MSA_heat_2
dev.off()
pdf("Mun_kingdoms.pdf")
Mun_heat_1
dev.off()
pdf("Mun_phyla.pdf")
Mun_heat_2
dev.off()
```

## MDS (Multidimensional Scaling) MSA & Munkres similarities

Multi-dimensional Scaling (MDS) is a classic multivariate data analysis technique that allows for obtaining a low-dimensional representation of the observed similarities. First, we transform each similarity measure into a distance measure as follows: let $s_{ij}$ be a similarity measure between a pair $i,j$, we define its distance measure as $d_{ij}=\sqrt{1-s_{ij}^2}$.

The following is the MDS for the MSA distance:

```{r, fig.align='center', fig.height=5, cache=TRUE}
## Metric multidimensional scaling (mMDS)
mds7 <- cmdscale(sqrt(1-Sim_MSA_mDAG^2),k=7,eig=TRUE)
mds7$GOF
mds <- mds7$points %>%  as_tibble()
colnames(mds) <-paste0("Dim.",1:dim(mds7$points)[2])


cooordinates=as_tibble(mds7$points)
colnames(cooordinates)=paste("Component",1:7)
ggpairs(cooordinates,columns=1:4,
        aes(color=meta_taxo$Kingdom[1:884],
            title="MDS 4 dimensions projection",legend=1),
        lower=list(continuous="points")) + 
  scale_fill_manual(values = colorsK$Kingdom) + 
  theme(legend.position = "left")
```

The following is the MDS for the Munkres distance:

```{r, fig.align='center', fig.height=5}
## Metric multidimensional scaling
mds7 <- cmdscale(sqrt(1-Sim_Mun_mDAG^2),k=7,eig=TRUE)
mds7$GOF
mds <- mds7$points %>%  as_tibble()
colnames(mds) <-paste0("Dim.",1:dim(mds7$points)[2])

cooordinates=as_tibble(mds7$points)
colnames(cooordinates)=paste("Component",1:7)
ggpairs(cooordinates,columns=1:4,
        aes(color=meta_taxo$Kingdom[1:884],
            title="MDS 4 dimensions projection",legend=1),
        lower=list(continuous="points")) + 
  scale_fill_manual(values = colorsK$Kingdom) + 
  theme(legend.position = "left")
```

## Hierarchical clustering MSA similarity

Through hierarchical clustering using the Ward method, we have derived a partition of the m-DAGs into 4, 5, and 6 clusters, respectively. The corresponding information has been organized into a table, as follows:

```{r}
D=as.dist(sqrt(1-Sim_MSA_mDAG^2))
hc_MSA=hclust(as.dist(D),method ="ward.D")
clust4_MSA=cutree(hc_MSA,4)
table(clust4_MSA,meta_taxo$Kingdom[1:884])
```

```{r}
clust5_MSA=cutree(hc_MSA,5)
table(clust5_MSA,meta_taxo$Kingdom[1:884])
```

```{r}
clust6_MSA=cutree(hc_MSA,6)
table(clust6_MSA,meta_taxo$Kingdom[1:884])
```

We can also create a table that correlates the clusters (in this case, two clusters) with the Phylum classification:

```{r}
aux=meta_taxo[1:884,] %>%
  select(Organism,Kingdom,Phylum,Class,Full_Name)
aux$clust4_MSA=clust4_MSA
aux_Animals_cluster_1_2 = aux %>%
  filter(Kingdom=="Animals",clust4_MSA %in% c(1,2))

table(aux_Animals_cluster_1_2$Phylum,aux_Animals_cluster_1_2$clust4_MSA)
```

We can retrieve the information of the elements belonging to a specific classification (Animals and Plants) that are part of a particular cluster as follows:

```{r}
aux_7_Animals_cluster_3= filter(aux,
                                clust4_MSA==3,
                                Kingdom=="Animals")
aux_7_Animals_cluster_3

aux_14_Plants_clust_3= filter(aux,clust4_MSA==3,
                             Kingdom=="Plants")
aux_14_Plants_clust_3
```

We can retrieve the information of the elements from a specific Phylum or Class, and the cluster they belong to, as follows:

```{r}
aux_all_Nematodes_Flatworns= aux %>% 
  filter(Kingdom=="Animals",
         Phylum %in% c("Nematodes","Flatworms"))
aux_all_Nematodes_Flatworns
```

The class Algae are all in the same cluster: 

```{r}
aux_all_algae_class= aux %>% 
  filter(Kingdom=="Plants",
         Class %in% c("algae"))
aux_all_algae_class
```


## Hierarchical clustering Munkres similarity

Analogous to the MSA similarity we obtain a classification of the m-DAGs into different clusters and retrieve the cluster's information as follows:

```{r}
D=as.dist(sqrt(1-Sim_Mun_mDAG^2))
hc_Mun=hclust(as.dist(D),method ="ward.D")
```

```{r}
clust4_Mun=cutree(hc_Mun,4)
table(clust4_Mun,meta_taxo$Kingdom[1:884])
```

```{r}
aux=meta_taxo[1:884,] %>%
  select(Organism,Kingdom,Phylum,Class,Full_Name)
aux$clust4_Mun=clust4_Mun
aux_Animals_cluster_1_2_Mun = aux %>%
  filter(Kingdom=="Animals",clust4_Mun %in% c(1,2))

table(aux_Animals_cluster_1_2_Mun$Phylum,
      aux_Animals_cluster_1_2_Mun$clust4_Mun)

aux_7_Animals_cluster_3_Mun= filter(aux,
                                clust4_Mun==3,
                                Kingdom=="Animals")
aux_7_Animals_cluster_3_Mun
aux_all_Nematodes_Flatworns= aux %>% 
  filter(Kingdom=="Animals",
         Phylum %in% c("Nematodes","Flatworms"))
aux_all_Nematodes_Flatworns

aux_14_Plants_clust2_Mun= filter(aux,clust4_Mun==3,
                             Kingdom=="Plants")
aux_14_Plants_clust2_Mun
aux_all_algae_class= aux %>% 
  filter(Kingdom=="Plants",
         Class %in% c("algae"))
aux_all_algae_class
```

## Comparison between MSA and Munkres similarities

In order to compare the two similarities we consider the Spearman and Pearson correlation. First, we load the similarities for every pair of m-DAG and each similarity measure.

```{r}
n=length(meta_taxo$mDAG_Id[1:884])
n
dim(Sim_MSA_mDAG)

aux=as_tibble(Sim_MSA_mDAG)
aux$mDag=names(aux)
aux=aux %>% pivot_longer(cols=`0313`:`0300`,
                         names_to="mDag_2",
                         values_to="Sim_MSA")

aux_2= aux %>%  mutate(i=pmax(as.integer(mDag),
                              as.integer(mDag_2)),
                       j=pmin(as.integer(mDag),
                       as.integer(mDag_2))) %>% unite("ij",i:j) %>%
  filter(duplicated(ij))


aux=as_tibble(Sim_Mun_mDAG)
aux$mDag=names(aux)
aux=aux %>% pivot_longer(cols=`0313`:`0300`,
                         names_to="mDag_2",
                         values_to="Sim_Mun")
aux_2 = aux_2 %>% left_join(aux)

Sim_comp=aux_2
rm(aux,aux_2)
```

Next we obtain the Spearman and Pearson correlations as follows:

```{r}
cor(Sim_comp[,c(3,5)],method="spearman")
cor(Sim_comp[,c(3,5)],method="pearson")
```

```{r}
GGally::ggpairs(Sim_comp[,c(3,5)])
```

```{r}
sim_pairs= Sim_comp%>% pivot_longer(
  cols=c(Sim_MSA,Sim_Mun),
  names_to="Method",
  values_to="Similarity")

ggstatsplot::ggbetweenstats(
  data = sim_pairs,
  x = Method,
  y = Similarity,
  centrality.plotting=TRUE)
```

```{r}
library(hrbrthemes)
library(viridis)
sim_pairs %>%
  ggplot( aes(x=Method, y=Similarity, fill=Method)) +
  geom_boxplot() +
  scale_fill_viridis(discrete = TRUE, alpha=0.6) +
  theme(legend.position="none")+
  ggtitle("Boxplot diagram of the similarities between the two aproaches") 
```

Basic statistics similarity

```{r} 
sim_pairs %>% group_by(Method) %>% 
  summarise(N=n(),
          mean=mean(Similarity),
          sd=sd(Similarity),
          Q1=quantile(Similarity,0.25),
          median=quantile(Similarity,0.5),
          Q3=quantile(Similarity,0.75))
```





```{r  include=FALSE,message=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      cache=FALSE,
                      warning = FALSE,
                      message = FALSE, out.width = "100%")
pdf="TRUE"
```

```{r  message=FALSE,echo=FALSE}
library(tidyverse)
library(igraph)
library(ComplexHeatmap)
library(viridis)
library(circlize)
library(plotly)
library(randomcoloR)
library(factoextra)
library(RColorBrewer)
library(kableExtra)
library(igraph)
library(GGally)
```

# Clusters analysis

In the Eukaryotes test, we aimed to analyze which factors caused some algae and plants to be distinguished from their respective kingdoms. To address this question, we revisited the core metabolism obtained with MetaDAG, focusing on each cluster.

```{r}
reactions=names(Results)
reactions=reactions[grep("(^R\\d{5})",reactions)]
reactions=tibble(reactions)
reactions=reactions %>% separate(reactions, into=c("r_id","enzyme"),sep="\\(",remove=FALSE)
reactions=reactions %>% mutate(enzyme=gsub("\\(|\\)","",enzyme))
#reactions=reactions[,-3]
reactions$rev=stringr::str_detect(reactions$r_id,"v")
```

The results of the clusters are compared to the classification of Kingdoms for both similarity measures:

```{r}
clust4_MSA2=tibble(mDAG_Id=names(clust4_MSA), clust4_MSA=clust4_MSA)
clust4_Mun2=tibble(mDAG_Id=names(clust4_Mun), clust4_Mun=clust4_Mun)
meta_taxo2=meta_taxo
meta_taxo2=meta_taxo2 %>% left_join(clust4_MSA2,by= "mDAG_Id") %>% 
  left_join(clust4_Mun2,by= "mDAG_Id")
meta_taxo2$combined_cluster_MSA_Kingdom=paste0(meta_taxo2$Kingdom,meta_taxo2$clust4_MSA)
meta_taxo2$combined_cluster_Mun_Kingdom=paste0(meta_taxo2$Kingdom,meta_taxo2$clust4_MSA)
write.csv(meta_taxo2,file="meta_taxo_4_clusters.csv")
```

```{r}
knitr::kable(table(meta_taxo2$Kingdom,meta_taxo2$clust4_MSA))
knitr::kable(table(meta_taxo2$Kingdom,meta_taxo2$clust4_Mun))
knitr::kable(table(meta_taxo2$clust4_Mun,meta_taxo2$clust4_MSA))
```

The table below correlates the clusters with the Phylum information.

```{r}
library(reshape2)
MSA_table=melt(table(meta_taxo2$Kingdom,meta_taxo2$Phylum,meta_taxo2$clust4_MSA))
names(MSA_table)=c("Kingdom","Phylum","cluster_MSA","N")
MSA_table=MSA_table %>% filter(N!=0)
```

```{r}
knitr::kable(MSA_table)
```

