# Introduction {.unnumbered}

This is an example of an experiment of [metaDag](https://http://bioinfo.uib.es/metadag/) data with results.

Hash: ff15c187-62e7-37c2-96a7-c824f7eab671

URL: http://bioinfo.uib.es/metadag/results?uuid=ff15c187-62e7-37c2-96a7-c824f7eab671

```{r setup_load_data, include=FALSE,message=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      cache=FALSE,
                      warning = FALSE,
                      message = FALSE)
```

```{r  tidy,message=FALSE}
library(tidyverse)
```

```{r setup, echo=FALSE,include=FALSE}
knitr::include_graphics("figures/screen_1.png")
```

```{r, include=FALSE,}
knitr::opts_chunk$set(message = FALSE,
                      warning = FALSE)
library(tidyverse)
```

```{r echo=FALSE}
knitr::include_graphics("figures/screen_2.png")
```

```{r echo=FALSE}
knitr::include_graphics("figures/screen_3.png")
```

```{r echo=FALSE}
knitr::include_graphics("figures/screen_4.png")
```

# Load data MetaDag experiment

```{r}
experiment=
  "results_ff15c187-62e7-37c2-96a7-c824f7eab671"
path_exp=paste0("data/",experiment,"/data/")
dir(path_exp)
```

```{r}
MBB=read_csv(paste0(path_exp,"Different_MBB.csv"),show_col_types = FALSE)
mDAG=read_csv(paste0(path_exp,"Different_mDAG.csv"),show_col_types = FALSE)
Results=read_csv(paste0(path_exp,"Results.csv"),show_col_types = FALSE)
save(MBB,mDAG,Results,file="MBB_mDag_Results.Rdata")
```

## MBB

In this experiment `MBB` is a table with `r nrow(MBB)` rows and `r ncol(MBB)` columns.

```{r}
library(knitr)
library(kableExtra)
#add_header_above(c("a" = 5, "b" = 18,"last"=2752-23)) %>%
# kable_paper() %>%
kable(MBB[1:20,1:30]) %>%   scroll_box(width = "100%", height = "200px")
```

Manual columnas MBB

```{r}
#definition_cols=data.frame(col_number,col_name,col,definition)
```

## mDAG

Abstract/unique mDAG's in this experiment

```{r}
dim(mDAG)
```

```{r}
kable(mDAG[1:20,1:30]) %>%   scroll_box(width = "100%", height = "200px")
```

```{r}
dim(mDAG)
names(mDAG)[1:6]
head(names(mDAG)[7:(dim(mDAG)[2]-1150)])# 28 to 1213  code MBB: 1 if MBB in mDAG 0
```

## Results

Tabular data `Results` for this experiment

```{r}
kable(Results[1:20,1:10])%>%
  row_spec(0, angle = -90) %>%   
  scroll_box(width = "300%", height = "1000px")
```

```{r}
dim(Results)
names(Results)[1]# organisms  kegg id  class representant of mDAG
names(Results)[2]# taxonomy separate by |
names(Results)[3]# mDAG_Id 
names(Results)[4]# Full name representant
names(Results)[6:36]# columns 6 to 2726  Variable Reactions name id: This reaction belongs to this ball for this MDAG. If not present the value is NA
```

```{r}
library(stringr)
reactions=names(Results)[-c(1:5)]
reverse_reactions=stringr::str_detect(reactions,"rev")
table(reverse_reactions)
```

# Read graph

```{r}
library(igraph)
gg1_mDAG=read.graph(paste0(path_exp,"Individuals/hsa/hsa_mDAG.graphml"),format = "graphml")
summary(gg1_mDAG)
barplot(table(degree(gg1_mDAG)))

gg1_core_mDAG=read.graph(
  paste0(path_exp,"Global/core/core_mDAG.graphml"), format = "graphml")

gg1_core_RC=read.graph(
  paste0(path_exp,                    "Global/core/core_RC.graphml"), format = "graphml")
```

```{r}
compo=components(gg1_mDAG,mode = "weak")
str(compo)
compo$csize
k=which.max(compo$csize==max(compo$csize))
k
table(compo$membership)
vertex=which(compo$membership==k)
length(vertex)
vertex
V(gg1_mDAG)
CC1=induced_subgraph(gg1_mDAG, vids=vertex)
summary(CC1)
```

# Load several similarities and metadata for an experiment



```{r}
library(tidyverse)
library(ComplexHeatmap)
library(viridis)
library(circlize)
library(plotly)
library(randomcoloR)
#library(knitr)
#library(kableExtra)
library(factoextra)
library(RColorBrewer)
library(kableExtra)
path_exp="data/results_ff15c187-62e7-37c2-96a7-c824f7eab671/data/"
```

## Data analysis whit 4 methods similarities Direct, Munkrest, Direct_Munkrest and Munkrest_Direct

## Load several similarities for mDag

# Load meta data from eukariotes experimet

Meta data mDa_Id and taxonomy sort by Kingdom,Filum,Class,mDAG_Id

```{r}
path_exp
Results=read_csv(paste0(path_exp,"Results.csv"))
names(Results)[c(1,3,4)]=c("Organism","mDAG_Id","Full_Name")
#code=Results %>% select(Organism:mDAG_Id)
taxo=Results %>% select(Organism:Full_Name)
index=is.na(taxo$Categories)
taxo=taxo %>% separate(Categories,into=c("Kingdom","Phylum","Class"))
taxo$Class[index]=paste(taxo$Kingdom[index],taxo$Phylum[index])
meta_taxo=taxo %>% arrange(Kingdom,Phylum)
index=which(is.na(meta_taxo$Class))
meta_taxo$Class[index]=meta_taxo$Phylum[index]
aux=table(meta_taxo$Class)
freq=tibble(Class=names(aux),Freq_Class=aux)
names(freq)=c("Class","Freq_Class")
meta_taxo =meta_taxo %>% left_join(freq)%>%
  arrange(Kingdom,Phylum,Class,desc(Freq_Class))
head(meta_taxo)
```

```{r}
table(meta_taxo$Kingdom) %>% kable %>%
  kable_styling("striped", full_width = F,position="left")%>% 
 scroll_box(width = "400px", height = "200px")
table(meta_taxo$Phylum,meta_taxo$Kingdom) %>% kable %>%
  kable_styling("striped", full_width = F,position="left")%>% 
 scroll_box(width = "500px", height = "500px")
```

# Similarities for MSA-similarity method

In this section we will show the similarities between mDAG's using different methods.

The experiment data set consists of `r nrow(meta_taxo)` eurkaryotes from the animal, plant, fungus, and protist kingdoms.

```{r, echo=FALSE}
knitr::kable(table(meta_taxo$Kingdom),col.names = c("Kingdom","Abs. Freq."))
```

```{r}
list_Sim=dir(path_exp,pattern="^Similarities")
list_Sim
list_Sim_mDAG=dir(path_exp,pattern="^Similarities_mDAG")
list_Sim_mDAG
```

```{r}
list_Sim_mDAG[1]
Sim_MSA_mDAG=read_csv(paste0(path_exp,list_Sim_mDAG[1]))
Sim_MSA_mDAG=as.matrix(Sim_MSA_mDAG[,-1])
rownames(Sim_MSA_mDAG)=colnames(Sim_MSA_mDAG)
Sim_MSA_mDAG=Sim_MSA_mDAG[meta_taxo$mDAG_Id,meta_taxo$mDAG_Id]
```

```{r}
list_Sim_mDAG[3]
Sim_Mun_mDAG=read_csv(paste0(path_exp,list_Sim_mDAG[3]))
Sim_Mun_mDAG=as.matrix(Sim_Mun_mDAG[,-1])
rownames(Sim_Mun_mDAG)=colnames(Sim_Mun_mDAG)
Sim_Mun_mDAG=Sim_Mun_mDAG[meta_taxo$mDAG_Id,meta_taxo$mDAG_Id]
```

## Heatmaps

## Heatmap Similarity MSA method

```{r, fig.align='center', fig.height=5, cache=TRUE}
dff<-meta_taxo %>% select(Kingdom)  %>% as.data.frame()
#str(dff)

colorsK <- list(Kingdom= c("Animals"="red","Plants"="green","Fungi"="yellow","Protists"="black"))

anot <- HeatmapAnnotation(df=dff, col = colorsK)

S=Sim_MSA_mDAG

a<- Heatmap(matrix = Sim_MSA_mDAG, 
                          column_title="m-DAGs MSA-similarity \n  Eukaryotes by Kingdom",
            name = "Kingdom",
            heatmap_legend_param = list(
    at = c(0.4,0.5,0.6,0.7,0.8,0.9,1)),
        col=rev(viridis(256)),
        cluster_rows = FALSE,
        cluster_columns = FALSE,
        top_annotation = anot,
        show_column_names = FALSE, 
        show_row_names = FALSE,
        left_annotation = rowAnnotation(df = dff,                                    col=colorsK,show_annotation_name=FALSE))
  
draw(a, merge_legend = TRUE)
```

```{r, fig.align='center', fig.height=5, cache=TRUE}
meta_animals= meta_taxo %>% filter(Kingdom=="Animals")
nombres=unique(meta_animals$Phylum)
aux_order=table(meta_animals$Phylum)
dff<-meta_taxo %>% filter(Kingdom=="Animals") %>% select(Phylum) %>% as.data.frame()
#str(dff)
nombres=unique(dff$Phylum)
col=rainbow(length(nombres))
colorsP=list(Phylum=col)
names(colorsP$Phylum)=nombres

anotacion <- HeatmapAnnotation(df=dff, col = colorsP)

orderP_freq=sort(table(dff$Phylum),decreasing = TRUE)
orderP_freq=tibble(Phylum=names(orderP_freq),Freq=orderP_freq)

a2<- Heatmap(matrix = S[1:535,1:535], 
              column_title="m-DAGs MSA-similarity \n  Animal  Phyla",
            name = " ", 
            heatmap_legend_param = list(
    at = seq(0,1.5,by=0.1)),
        col=rev(viridis(256)),
        cluster_rows = FALSE,
        cluster_columns = FALSE,
        top_annotation = anotacion,
        show_column_names = FALSE, 
        show_row_names = FALSE,
        left_annotation = rowAnnotation(df = dff, col = colorsP,show_annotation_name=TRUE))
  
draw(a2, merge_legend = TRUE)

```

## MDS (Multidimensional Scaling)

```{r, fig.align='center', fig.height=5, cache=TRUE}

## Metric multidimensional scaling (mMDS)
mds7 <- cmdscale(sqrt(1-Sim_MSA_mDAG^2),k=7,eig=TRUE)
#pairs(mds7$points[,1:4])
mds7$GOF
mds <- mds7$points %>%  as_tibble()
colnames(mds) <-paste0("Dim.",1:dim(mds7$points)[2])

library(GGally)
cooordinates=as_tibble(mds7$points)
colnames(cooordinates)=paste("Component",1:7)
ggpairs(cooordinates,columns=1:4,aes(color=meta_taxo$Kingdom,alpha=0.5,title="MDS 4 dimensions projection",legend=1),upper=list(continuous="points")) +scale_fill_manual(values = colorsK$Kingdom)+ theme(legend.position = "left")

mds <- mds %>%
  mutate(groups =as.factor(meta_taxo$Kingdom))


#,text= ~paste("Age:", groups, '<br>Name:')
length(unique(meta_taxo$Phylum))

#col_mds=c("purple","green","yellow","coral")
col_mds=rainbow(33)
#mcol_mds=bremer.pal(7,"Greens")

# fig <- 
# plot_ly(
#   mds, x = ~Dim.1, y = ~Dim.2,
#   color = ~groups, 
#   colors= colors,
#   type="scatter",
#   mode="markers") %>%
#   layout(
#     xaxis = list(autorange=2,
#       range=c(-0.8,0.8)), yaxis = list(autorange=2,
#       range=c(-0.8,0.8)))
# #
# jpeg(filename="figures/fig1.jpeg")
# fig
# dev.off
```

```{r echo=FALSE,fig.align='center',out.width="80%"}
knitr::include_graphics("figures/fig1.jpeg")

```

# Hierarchical cluster

```{r}
library(dendextend)
D=as.dist(sqrt(1-Sim_MSA_mDAG^2))
hc=hclust(as.dist(D),method ="ward.D")
library(circlize)
circlize_dendrogram(as.dendrogram(hc))
```

```{r}
clust4=cutree(hc,4)
table(clust4,meta_taxo$Kingdom)
```

# Similarities Munkres method

## Heatmap Similarity Mun_MSA method

```{r, fig.align='center', fig.height=5, cache=TRUE}
dff<-meta_taxo %>% select(Kingdom)  %>% as.data.frame()
#str(dff)

colores <- list(Kingdom= c("Animals"="red",
                           "Plants"="green",
                           "Fungi"="black",
                           "Protists"="yellow"))

anotacion <- HeatmapAnnotation(df=dff, col = colores)

S=Sim_Mun_mDAG
a<- Heatmap(matrix = Sim_Mun_mDAG, 
                          column_title="Similarity mDag Munkres Method\n  Eukaryote Kingdoms",
            name = "Kingdom",
            heatmap_legend_param = list(
    at = c(0.4,0.5,0.6,0.7,0.8,0.9,1)),
        col=rev(viridis(256)),
        cluster_rows = FALSE,
        cluster_columns = FALSE,
        top_annotation = anotacion,
        show_column_names = FALSE, 
        show_row_names = FALSE,
        left_annotation = rowAnnotation(df = dff, col = colores,show_annotation_name=FALSE))
  
draw(a, merge_legend = TRUE)
```

```{r, fig.align='center', fig.height=5, cache=TRUE}
meta_animals= meta_taxo %>% filter(Kingdom=="Animals")
nombres=unique(meta_animals$Phylum)
aux_order=table(meta_animals$Phylum)
dff<-meta_taxo %>% filter(Kingdom=="Animals") %>% select(Class) %>% as.data.frame()
#str(dff)
nombres=unique(dff$Class)
col=rainbow(length(nombres))
colores=list(Class=col)
names(colores$Class)=nombres
#paste0(paste0('"',nombres,'"="',col,'"'),collapse=",")
# colores <- list(Class=c(
# "Amphibians"="#FF0000","Annelids"="#FF4900",
# "Cartilaginous"="#FF9200","Cephalochordates"="#FFDB00",
# "Chelicerates"="#DBFF00","Cnidarians"="#92FF00",
# "Crustaceans"="#49FF00","Echinoderms"="#00FF00",
# "Fishes"="#00FF49","Flatworms"="#00FF92",
# "Hemichordates"="#00FFDB","Insects"="#00DBFF",
# "Mammals"="#0092FF","Mollusks"="#0049FF",
# "Nematodes"="#0000FF","Placozoans"="#4900FF",
# "Poriferans"="#9200FF",
# "Reptiles"="#DB00FF",
# "Tunicates"="#FF00DB",
# "Mammals"="#FF0092",
# "Reptiles"="#FF0049"))
# aux=names(colores$Class)
# colores$Class=as.character(palette.colors(n=21,palette="Polychrome 36"))
# attr(colores$Class,"names")=aux


anotacion <- HeatmapAnnotation(df=dff, col = colores)


a2<- Heatmap(matrix = S[1:535,1:535], 
              column_title="Similarity mDag Munkres  Method\n  Animals by Class",
            name = "Class", 
            heatmap_legend_param = list(
    at = seq(0,1.5,by=0.1)),
        col=rev(viridis(256)),
        cluster_rows = FALSE,
        cluster_columns = FALSE,
        top_annotation = anotacion,
        show_column_names = FALSE, 
        show_row_names = FALSE,
        left_annotation = rowAnnotation(df = dff, col = colores,show_annotation_name=FALSE))
  
draw(a2, merge_legend = TRUE)

```

## MDS (Multidimensional Scaling)

```{r, fig.align='center', fig.height=5, cache=TRUE}

## Metric multidimensional scaling (mMDS)
mds7 <- cmdscale(sqrt(1-Sim_Mun_mDAG^2),k=7,eig=TRUE)
#pairs(mds7$points[,1:4])
mds7$GOF
mds <- mds7$points %>%  as_tibble()
colnames(mds) <-paste0("Dim.",1:dim(mds7$points)[2])

library(GGally)
cooordinates=as_tibble(mds7$points)
colnames(cooordinates)=paste("Component",1:7)
ggpairs(cooordinates,columns=1:4,
        aes(color=meta_taxo$Kingdom,
            title="MDS 4 dimensions projection",legend=1),
        lower=list(continuous="points")) + 
  scale_fill_manual(values = colorsK$Kingdom) + 
  theme(legend.position = "left")

```

# Hierarchical cluster

```{r}
library(dendextend)
D=as.dist(sqrt(1-Sim_Mun_mDAG^2))
hc=hclust(as.dist(D),method ="ward.D")
ggplot(as.ggdend(as.dendrogram(hc)))
```

```{r}
clust4=cutree(hc,4)
table(clust4,meta_taxo$Kingdom)
```

```{r}
save(Sim_MSA_mDAG,Sim_Mun_mDAG,meta_taxo,
     file="Similarities.Rdata")
```

# Similarity comparisons

Comparison of two similarities

## Eukaryotes

Load the similarities for pairs and comparison

```{r}
library(gtools)
library(tidyverse)
load("Similarities.Rdata")
ls(pattern="^Sim")
n=length(meta_taxo$mDAG_Id)
dim(Sim_MSA_mDAG)
aux1=base::rep(x=1:n,each=c(n:1))

aux=as_tibble(Sim_MSA_mDAG)
aux$mDag=names(aux)
aux=aux %>% pivot_longer(cols=`0576`:`0036`,
                         names_to="mDag_2",values_to="Sim_MSA")
aux_2= aux %>%  mutate(i=pmax(as.integer(mDag),as.integer(mDag_2)),
                       j=pmin(as.integer(mDag),as.integer(mDag_2)))%>%
  unite("ij",i:j) %>% filter(duplicated(ij))


aux=as_tibble(Sim_Mun_mDAG)
aux$mDag=names(aux)
aux=aux %>% pivot_longer(cols=`0576`:`0036`,names_to="mDag_2",values_to="Sim_Mun")
aux_2 = aux_2 %>% left_join(aux)

Sim_comp=aux_2[,c(1,2,4,3,5)]
rm(aux,aux_2)
```

**Spearman and Pearson correlations**

```{r}
cor(Sim_comp[,4:5],method="spearman")
cor(Sim_comp[,4:5],method="pearson")
```

```{r cache=TRUE}
library(GGally)
ggpairs(Sim_comp[,4:5])
```

```{r}
boxplot(Sim_comp[,4:5])
```

# Some statistics...



## Read all graphs from a level of the experiment

Read all graphs from a level from experiment; for example individuals. We read only firts (alphabetic) two graph

# Graph

```{r}
load("Similarities.Rdata")
load("MBB_mDag_Results.Rdata")
path_exp="data/results_ff15c187-62e7-37c2-96a7-c824f7eab671/data/"
list_names=dir(paste0(path_exp,"Individuals/"))
#list_names
list_names= list_names[-1] # filter 0000_RefPw
length(list_names)
#list_names
#dir(paste0("Individuals/",list_names[1],"/"))
library(igraph)
graphs_list=paste0(path_exp,"Individuals/",list_names,"/",list_names,"_MDAG.graphml")
#head(as_long_data_frame(g_MDAG_list[[1]]))
```

```{r}
knitr::include_graphics(
  paste0(path_exp,"Individuals/cang/cang_mDAG.svg"))
```

```{r}
knitr::include_graphics(paste0(path_exp,"Individuals/cang/cang_mDAG_essential.svg"))
```

```{r}
knitr::include_graphics(
  paste0(path_exp,"Individuals/cang/cang_RC.svg"))
```

## Graph statistics

```{r}
read_mDAG=function(x) {DAG=read.graph(file=x,
                                  format="graphml")
  return(DAG)}
mDAG_componets=function(x) {sort(components(x,mode = "weak")$csize,
                                 decreasing=TRUE)}



compo_list=lapply(graphs_list,
                  FUN=function(x) {
                    gg=read_mDAG(x)
                  aux=list(
                    mDAG_componets=mDAG_componets(gg),
                    degree_count=igraph::degree(gg,mode="total"))
                    return(aux)}
                  )

names(compo_list)=list_names
n=max(sapply(compo_list,FUN=function(x) {length(x[[1]])}))
n
size_compo_list=lapply(compo_list,FUN=function(x) {
  return(c(x[[1]],rep(NA,n-length(x[[1]]))))})

aux=do.call(bind_cols,size_compo_list)
aux2=pivot_longer(aux,aaf:zvi,names_to="Organism",
                  values_to="csize")%>%
  arrange(Organism,-csize)
aux2$index=rep(1:n,times=dim(aux)[2])
aux2=aux2 %>% left_join(meta_taxo,by="Organism")
```

```{r}
Organism=names(compo_list)
big_MBB=function(org){
  x=Results %>% filter(Organism==org)
  x=as.character(x[1,5:dim(Results)[2]])
  x=x[x!="NA"]
  tt=sort(table(x),decreasing=TRUE)
  return(tt)
  }
big_MBB_list= lapply(Organism,FUN=function(x) big_MBB(x))
nMBB=max(sapply(big_MBB_list,FUN=function(x) length(x)))
nMBB
big_MBB_list=lapply(big_MBB_list,
                    FUN=function(x){
                      x=c(x,rep(NA,nMBB-length(x)))
                      return(x)}
)
names(big_MBB_list)=Organism
big_MBB_list=do.call(bind_cols,big_MBB_list)

kMBB=nrow(big_MBB_list)
index=rep(1:kMBB,times=length(Organism))

big_MBB_list2=pivot_longer(big_MBB_list,cols=names(big_MBB_list),values_to = "MBBsize",names_to = "Organism") %>% arrange(Organism,-MBBsize)%>%  mutate(index=index) %>%  left_join(meta_taxo,by="Organism")

```

### Sizes of MBB for each mDAG

```{r}
COLOR_KINGDOM=c("red","black","green","yellow")
colors_kingdom=big_MBB_list2%>% select(Organism,Kingdom) %>% distinct()
names(COLOR_KINGDOM)=sort(unique(colors_kingdom$Kingdom))

p0<-ggplot(data=big_MBB_list2) + 
  geom_line(mapping=aes(x=index,y=MBBsize,group = Organism,color=Kingdom)) + 
  scale_y_continuous(trans='log10') + 
  scale_x_continuous(trans='identity') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])+
   ggtitle("Plot log-identity of MBB \n  decreasing index.") +
  ylab("Log10 MBB size") + xlab("Index")


p1<- ggplot(data=big_MBB_list2) + 
  geom_line(mapping=aes(x=index,y=MBBsize,group = Organism,color=Kingdom)) + 
  scale_x_continuous(trans='log10') + 
  scale_y_continuous(trans='log10') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])+
   ggtitle("Plot log10-log10identity of MBB \n  decreasing index.") +
  ylab("Log10 MBB size") + xlab("Log10 Index")

p2<- ggplot(data=big_MBB_list2) + 
  geom_line(mapping=aes(x=index,y=MBBsize,group = Organism,color=Kingdom),na.rm=TRUE,se = FALSE)+
   scale_x_continuous(trans="identity") + 
  scale_y_continuous(trans="identity") +
  ylim(0,1039)+
   ggtitle("Plot  of MBB sized  \n  decreasing index.") +
  ylab("MBB size") + xlab("Index")+
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])

library(patchwork)

p0
p1
p2
```

### Sizes of weak components for each mDAG

```{r}
COLOR_KINGDOM=c("red","black","green","yellow")
colors_kingdom=aux2%>% select(Organism,Kingdom) %>% distinct()
names(COLOR_KINGDOM)=sort(unique(colors_kingdom$Kingdom))

p0<-ggplot(data=aux2) + 
  geom_line(mapping=aes(x=index,y=csize,group = Organism,color=Kingdom)) + 
  scale_x_continuous(trans='log10') + 
  scale_y_continuous(trans='identity') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])+
   ggtitle("Plot log-identity of size  weak components \n  decreasing index.") +
  ylab("Log10 Weak componente size") + xlab("Index")


p1<- ggplot(data=aux2) + 
  geom_line(mapping=aes(x=index,y=csize,group = Organism,color=Kingdom)) + 
  scale_y_continuous(trans='log10') + 
  scale_x_continuous(trans='log10') +
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])+
   ggtitle("Plot log-log of size  weak components \n  decreasing index.") +
  ylab("Log10 weak component size") + xlab("Log10 Index")

p2<- ggplot(data=big_MBB_list2) + 
  geom_smooth(mapping=aes(x=index,y=MBBsize,group = Organism,color=Kingdom),na.rm=TRUE,se = FALSE)+
   scale_x_continuous(trans="identity") + 
  scale_y_continuous(trans="identity") +
  ylim(0,1039)+
   ggtitle("Plot  of size  weak components \n  decreasing index.")+  ylab("Weak components size") + xlab("Index")+
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])

library(patchwork)

p0
p1
p2
```

```{r}
data2=big_MBB_list2 %>% filter(index!=1)
p3<- ggplot(data=data2) + 
  geom_line(mapping=aes(x=index,y=MBBsize,group = Organism,color=Kingdom),na.rm=TRUE,se = FALSE)+
   scale_x_continuous(trans="identity") + 
  scale_y_continuous(trans="identity") +
  ylim(0,25)+
   ggtitle("Plot  of size  weak components \n  decreasing index.")+  ylab("Weak components size") + xlab("Index")+
  scale_color_manual(values =COLOR_KINGDOM[colors_kingdom$Kingdom])

p3
```
