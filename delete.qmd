---
title: "Poster"
format: 
  html:
    theme: yeti
toc: true
toc_depth: 4
embed-resources: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning =FALSE )

library(tidyverse)
library(readr)
library(knitr)
library(patchwork)
```

# AMN data

```{r}
datos_AMN <- read_csv("graphsSummaries_AMN.csv")
datos_AMN$kingdom=as.factor(datos_AMN$kingdom)
datos_AMN$name=as.factor(datos_AMN$name)
datos_AMN<- datos_AMN %>% select(vertexes,                             connected_components,
              connected_component_size_max,
        isolated_components,
        kingdom)
glimpse(datos_AMN)
```

# m-DAG data

```{r}
datos_mDAG <- read_csv("graphsSummaries_mDAG.csv")
datos_mDAG$kingdom=as.factor(datos_mDAG$kingdom)
datos_mDAG$name=as.factor(datos_mDAG$name)
datos_mDAG<- datos_mDAG %>% select(vertexes,                             connected_components,
              connected_component_size_max,
        isolated_components,
        kingdom)
glimpse(datos_mDAG)
```

# RG data

```{r}
datos_RG <- read_csv("graphsSummaries_R.csv")
datos_RG$kingdom=as.factor(datos_RG$kingdom)
datos_RG$name=as.factor(datos_RG$name)
datos_RG<- datos_RG %>% select(vertexes,                             connected_components,
              connected_component_size_max,
        isolated_components,
        kingdom)
glimpse(datos_RG)
```

## Final dataset

```{r}
Kingdom <- datos_RG$kingdom
Kingdom <- as.factor(Kingdom)
Kingdom<-rep(Kingdom,3)
v_RG <-datos_RG$vertexes
v_mDAG <-datos_mDAG$vertexes
v_AMN <-datos_AMN$vertexes
CC_RG <- datos_RG$connected_components
IC_RG <- datos_RG$isolated_components
CC_mDAG <- datos_mDAG$connected_components
IC_mDAG <- datos_mDAG$isolated_components
CC_AMN <- datos_AMN$connected_components
IC_AMN <- datos_AMN$isolated_components
max_sizeCC_RG<-datos_RG$connected_component_size_max
max_sizeCC_mDAG<-datos_mDAG$connected_component_size_max
max_sizeCC_AMN<-datos_AMN$connected_component_size_max
CC<-c(CC_RG,CC_mDAG,CC_AMN)
IC<-c(IC_RG,IC_mDAG,IC_AMN)
V<-c(v_RG,v_mDAG,v_AMN)
maxCC<-c(max_sizeCC_RG,max_sizeCC_mDAG,max_sizeCC_AMN)
Model<-c(rep("RG",8905),rep("m-DAG",8905),rep("AMN",8905))
Model<-factor(Model, 
                 levels=c("RG",
                          "m-DAG",
                          "AMN"))
datos<-data.frame(Kingdom,Model,V,CC,IC,maxCC)

datos <- datos %>%
  mutate(Kingdom = case_when(
    Kingdom == 1 ~ "Animals",
    Kingdom == 2 ~ "Plants",
    Kingdom == 3 ~ "Fungis",
    Kingdom == 4 ~ "Protists",
    Kingdom == 5 ~ "Bacterias",
    Kingdom == 6 ~ "Archaeas"))
glimpse(datos)
```

## Connected components

```{r}
datos$Kingdom<-factor(datos$Kingdom,
                      levels = c("Animals",
                                 "Plants",
                                 "Fungis",
                                 "Protists",
                                 "Bacterias",
                                 "Archaeas"))
datos$Model<-factor(datos$Model,
                    levels = c("AMN",
                               "m-DAG",
                               "RG"))
g<-ggplot(datos, aes(x=Model,
                  y=CC,
                  fill=Kingdom)) +
  xlab("") +
  ylab("Number of connected components")+
    geom_boxplot()+
  scale_y_continuous(breaks = seq(0, 300, by = 20))+
  scale_fill_manual(values = c("Animals" = "red", "Plants" = "green", "Fungis" = "orange", "Protists" = "#A9A9A9", "Bacterias"="cyan","Archaeas"="blue")) +
  theme_minimal()
g
```

## Isolated nodes

```{r}
datos$Kingdom<-factor(datos$Kingdom,
                      levels = c("Animals",
                                 "Plants",
                                 "Fungis",
                                 "Protists",
                                 "Bacterias",
                                 "Archaeas"))
datos$Model<-factor(datos$Model,
                    levels = c("AMN",
                               "m-DAG",
                               "RG"))
g<-ggplot(datos, aes(x=Model,
                  y=IC,
                  fill=Kingdom)) +
  xlab("") +
  ylab("Number of isolated nodes")+
    geom_boxplot()+
  scale_y_continuous(breaks = seq(0, 300, by = 20))+
  scale_fill_manual(values = c("Animals" = "red", "Plants" = "green", "Fungis" = "orange", "Protists" = "#A9A9A9", "Bacterias"="cyan","Archaeas"="blue")) +
  theme_minimal()
g
```

## Nodes

### Tabla con las medianas de los nodos por reino y modelo

```{r}
medianas<-datos %>% 
          group_by(Model,Kingdom) %>% 
          summarise(mediana_V=median(V),
          mediana_connected = median(V-IC),
          mediana_isolated = median(IC),
          mediana_connected_compo_size_max=median(maxCC),
          .groups = "drop")
```

### Tabla con las medianas de los nodos por reino

```{r}

medianas_model <- medianas %>% 
                   group_by(Model) %>% 
                   summarise(mediana_T=median(mediana_V),
                   mediana_C=median(mediana_connected),
                   mediana_I=median(mediana_isolated),
               porcentaje_iso=round((median(mediana_isolated)/median(mediana_V))*100,2),
          .groups = "drop")       
                  

medianas<-as.data.frame(medianas)
medianas

medianas_model<-as.data.frame(medianas_model)
medianas_model

line_positions <- c(6.5, 12.5)

medianas_long <- medianas %>%
  pivot_longer(cols = c("mediana_connected",
  "mediana_isolated"), 
               names_to = "Variable", 
               values_to = "Value")
```

### Tipo de nodos en valores absolutos

```{r}
g1<- ggplot(medianas_long, aes(x = Kingdom, 
                          y = Value, 
                          fill = Variable)) +
  geom_bar(stat = "identity", position = "stack") +  
  facet_wrap(~ Model) + 
  geom_vline(xintercept = line_positions, 
             linetype = "dashed", color = "black") +
  theme_minimal() +  
  labs(
    title = "",
    x = "",
    y = "Number of nodes",
    fill = "Variable"
  ) +
  scale_fill_manual(
    values = c("mediana_connected" = "#1f77b4", "mediana_isolated" = "#ff7f0e"),  
    labels = c("mediana_connected" = "Connected", "mediana_isolated" = "Isolated")) +
  scale_y_continuous(breaks = seq(0, 2000, by = 100)) + 
  theme(legend.position = "none",  
        axis.text.x = element_text(angle = 45, hjust = 1),  
    panel.grid.major.x = element_blank()) 


g1
```

### Tipos de nodos en porcentaje

```{r}
medianas_long <- medianas_long %>%
  group_by(Kingdom, Model) %>%
  mutate(Value = Value / sum(Value))  # Normaliza los valores para que sumen 1

# Crear el gráfico con el eje y en porcentaje
g2<- ggplot(medianas_long, aes(x = Kingdom, y = Value, fill = Variable)) +
  geom_bar(stat = "identity", position = "stack") +  
  facet_wrap(~ Model) + 
  geom_vline(xintercept = line_positions, linetype = "dashed", color = "black") +
  theme_minimal() +  
  labs(
    title = "",
    x = "",
    y = "Percentage of nodes",
    fill = "Variable"
  ) +
  scale_fill_manual(
    values = c("mediana_connected" = "#1f77b4", "mediana_isolated" = "#ff7f0e"),  
    labels = c("mediana_connected" = "Connected", "mediana_isolated" = "Isolated")
  ) +
  scale_y_continuous(labels = scales::percent, breaks = seq(0, 1, by = 0.1)) +  # Cambia la escala a porcentaje
  theme(
    legend.title = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1),  
    panel.grid.major.x = element_blank()
  )
g2
```

### Combinados

```{r}
combined <- g1 + g2  + plot_layout(ncol = 2)
combined
```

## Maximum connected component size

### Boxplot con por modelo y reino

```{r}
g<-ggplot(datos, aes(x=Model,
                  y=maxCC,
                  fill=Kingdom)) +
  xlab("") +
  ylab("Maximum connected component size")+
    geom_boxplot()+
  scale_y_continuous(breaks = seq(1, 2000, by = 100))+
  scale_fill_manual(values = c("Animals" = "red", "Plants" = "green", "Fungis" = "orange", "Protists" = "#A9A9A9", "Bacterias"="cyan","Archaeas"="blue")) +
  theme_minimal()
g
```

### Violines para datos de RG

```{r}
df_RG <- datos %>%
  filter(Model == "RG")

my_pal=c("Animals" = "red", "Plants" = "green", "Fungis" = "orange", "Protists" = "#A9A9A9", "Bacterias"="cyan","Archaeas"="blue")

g_rg<- ggplot(df_RG, aes(x = Kingdom, y = maxCC, fill=Kingdom)) +
  geom_jitter(aes(color = Kingdom), width = 0.2, size = 1.5, alpha = 0.3) +
  geom_violin(trim = FALSE, alpha = 0.5) +
  scale_fill_manual(values=my_pal) +
  scale_color_manual(values = my_pal) +
  labs(x = "RG", y = "", title = "") +
  theme_minimal() +
  theme(legend.position = "none",  
        axis.text.x = element_text(angle = 45, hjust = 1)) 

g_rg
```

### Violines para datos de m-DAG

```{r}
df_mDAG <- datos %>%
  filter(Model == "m-DAG")

my_pal=c("Animals" = "red", "Plants" = "green", "Fungis" = "orange", "Protists" = "#A9A9A9", "Bacterias"="cyan","Archaeas"="blue")

g_mDAG<- ggplot(df_mDAG, aes(x = Kingdom, y = maxCC, fill=Kingdom)) +
  geom_jitter(aes(color = Kingdom), width = 0.2, size = 1.5, alpha = 0.3) +
  geom_violin(trim = FALSE, alpha = 0.5) +
  scale_fill_manual(values=my_pal) +
  scale_color_manual(values = my_pal) +
  labs(x = "m-DAG", y = "", title = "") +
  theme_minimal()  +
  theme(legend.position = "none",  
        axis.text.x = element_text(angle = 45, hjust = 1))

g_mDAG
```

### Violines para datos de AMN

```{r}
df_amn <- datos %>%
  filter(Model == "AMN")

my_pal=c("Animals" = "red", "Plants" = "green", "Fungis" = "orange", "Protists" = "#A9A9A9", "Bacterias"="cyan","Archaeas"="blue")

g_AMN<- ggplot(df_amn, aes(x = Kingdom, y = maxCC, fill=Kingdom)) +
  geom_jitter(aes(color = Kingdom), width = 0.2, size = 1.5, alpha = 0.3) +
  geom_violin(trim = FALSE, alpha = 0.5) +
  scale_fill_manual(values=my_pal) +
  scale_color_manual(values = my_pal) +
  labs(x = "AMN", y = "Maximum connected component size", title = "") +
  theme_minimal()  +
  theme(legend.position = "none",  
        axis.text.x = element_text(angle = 45, hjust = 1))
g_AMN
```

### Violines para los modelos en un único gráfico

```{r}
combined <- g_AMN + g_mDAG +  g_rg + plot_layout(ncol = 3)
combined
```
